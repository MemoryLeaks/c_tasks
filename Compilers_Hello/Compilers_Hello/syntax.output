Terminals unused in grammar

   MY_MULTILINE_COMMENTS
   MY_SIMPLE_COMMENTS
   MY_DO
   MY_GLOBAL
   MY_STATIC
   MY_BLANK
   MY_NL
   MY_OTHER


State 115 conflicts: 13 shift/reduce
State 144 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmts: stmt stmts
    3      | %empty

    4 stmt: expr MY_SEMICOLON
    5     | ifstmt
    6     | whilestmt
    7     | forstmt
    8     | returnstmt
    9     | MY_BREAK MY_SEMICOLON
   10     | MY_CONTINUE MY_SEMICOLON
   11     | block
   12     | funcdef
   13     | MY_SEMICOLON

   14 expr: assignexpr
   15     | expr operator expr
   16     | term

   17 operator: MY_PLUS
   18         | MY_MINUS
   19         | MY_MUL
   20         | MY_DIV
   21         | MY_MOD
   22         | MY_G
   23         | MY_GE
   24         | MY_L
   25         | MY_LE
   26         | MY_EQUAL
   27         | MY_NEQUAL
   28         | MY_AND
   29         | MY_OR

   30 term: MY_OPEN_PAR expr MY_CLOSE_PAR
   31     | MY_MINUS expr
   32     | MY_NOT expr
   33     | MY_INC lvalue

   34 $@1: %empty

   35 term: lvalue $@1 MY_INC
   36     | MY_DEC lvalue

   37 $@2: %empty

   38 term: lvalue $@2 MY_DEC
   39     | primary

   40 $@3: %empty

   41 assignexpr: lvalue $@3 MY_ASSIGN expr

   42 primary: lvalue
   43        | call
   44        | objectdef
   45        | MY_OPEN_PAR funcdef MY_CLOSE_PAR
   46        | const

   47 lvalue: MY_ID
   48       | MY_LOCAL MY_ID
   49       | MY_DOT_STREAM MY_ID
   50       | member

   51 member: lvalue MY_DOT_SIMPLE MY_ID
   52       | lvalue MY_OPEN_BRA expr MY_CLOSE_BRA
   53       | call MY_DOT_SIMPLE MY_ID
   54       | call MY_OPEN_BRA expr MY_CLOSE_BRA

   55 call: call MY_OPEN_PAR elist MY_CLOSE_PAR
   56     | lvalue callsuffix
   57     | MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

   58 callsuffix: normcall
   59           | methodcall

   60 normcall: MY_OPEN_PAR elist MY_CLOSE_PAR

   61 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR elist MY_CLOSE_PAR

   62 elist: expr commaexprs
   63      | %empty

   64 commaexprs: MY_COMMA expr commaexprs
   65           | %empty

   66 objectdef: MY_OPEN_BRA elist MY_CLOSE_BRA
   67          | MY_OPEN_BRA indexed MY_CLOSE_BRA

   68 indexed: indexedelem commaindex

   69 commaindex: MY_COMMA indexedelem commaindex
   70           | %empty

   71 indexedelem: MY_OPEN_ANG expr MY_DOT_UD expr MY_CLOSE_ANG

   72 $@4: %empty

   73 block: MY_OPEN_ANG $@4 stmts MY_CLOSE_ANG

   74 $@5: %empty

   75 funcdef: MY_FUNCTION $@5 MY_OPEN_PAR idlist MY_CLOSE_PAR block

   76 $@6: %empty

   77 funcdef: MY_FUNCTION MY_ID $@6 MY_OPEN_PAR idlist MY_CLOSE_PAR block

   78 const: MY_REAL
   79      | MY_INTEGER
   80      | MY_STRING
   81      | MY_NIL
   82      | MY_TRUE
   83      | MY_FALSE

   84 $@7: %empty

   85 idlist: MY_ID $@7 idwithcommas
   86       | %empty

   87 $@8: %empty

   88 idwithcommas: MY_COMMA MY_ID $@8 idwithcommas
   89             | %empty

   90 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt
   91       | MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE stmt

   92 whilestmt: MY_WHILE MY_OPEN_PAR expr MY_CLOSE_PAR stmt

   93 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

   94 returnstmt: MY_RETURN MY_SEMICOLON
   95           | MY_RETURN expr MY_SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
MY_MULTILINE_COMMENTS (258)
MY_SIMPLE_COMMENTS (259)
MY_STRING (260) 80
MY_IF (261) 90 91
MY_ELSE (262) 91
MY_FOR (263) 93
MY_WHILE (264) 92
MY_DO (265)
MY_CONTINUE (266) 10
MY_BREAK (267) 9
MY_RETURN (268) 94 95
MY_AND (269) 28
MY_OR (270) 29
MY_NOT (271) 32
MY_LOCAL (272) 48
MY_GLOBAL (273)
MY_STATIC (274)
MY_NIL (275) 81
MY_TRUE (276) 82
MY_FALSE (277) 83
MY_FUNCTION (278) 75 77
MY_ID (279) 47 48 49 51 53 61 77 85 88
MY_BLANK (280)
MY_NL (281)
MY_INTEGER (282) 79
MY_REAL (283) 78
MY_ASSIGN (284) 41
MY_EQUAL (285) 26
MY_NEQUAL (286) 27
MY_PLUS (287) 17
MY_INC (288) 33 35
MY_MINUS (289) 18 31
MY_DEC (290) 36 38
MY_MUL (291) 19
MY_DIV (292) 20
MY_MOD (293) 21
MY_L (294) 24
MY_LE (295) 25
MY_G (296) 22
MY_GE (297) 23
MY_OPEN_ANG (298) 71 73
MY_OPEN_BRA (299) 52 54 66 67
MY_OPEN_PAR (300) 30 45 55 57 60 61 75 77 90 91 92 93
MY_CLOSE_ANG (301) 71 73
MY_CLOSE_BRA (302) 52 54 66 67
MY_CLOSE_PAR (303) 30 45 55 57 60 61 75 77 90 91 92 93
MY_DOT_UD (304) 71
MY_DOT_STREAM (305) 49
MY_DOT_SIMPLE (306) 51 53
MY_DOT_DOUBLE (307) 61
MY_COMMA (308) 64 69 88
MY_SEMICOLON (309) 4 9 10 13 93 94 95
MY_OTHER (310)
UNARY_MINUS (311)


Nonterminals, with rules where they appear

$accept (57)
    on left: 0
program (58)
    on left: 1, on right: 0
stmts (59)
    on left: 2 3, on right: 1 2 73
stmt (60)
    on left: 4 5 6 7 8 9 10 11 12 13, on right: 2 90 91 92 93
expr (61)
    on left: 14 15 16, on right: 4 15 30 31 32 41 52 54 62 64 71 90
    91 92 93 95
operator (62)
    on left: 17 18 19 20 21 22 23 24 25 26 27 28 29, on right: 15
term (63)
    on left: 30 31 32 33 35 36 38 39, on right: 16
$@1 (64)
    on left: 34, on right: 35
$@2 (65)
    on left: 37, on right: 38
assignexpr (66)
    on left: 41, on right: 14
$@3 (67)
    on left: 40, on right: 41
primary (68)
    on left: 42 43 44 45 46, on right: 39
lvalue (69)
    on left: 47 48 49 50, on right: 33 35 36 38 41 42 51 52 56
member (70)
    on left: 51 52 53 54, on right: 50
call (71)
    on left: 55 56 57, on right: 43 53 54 55
callsuffix (72)
    on left: 58 59, on right: 56
normcall (73)
    on left: 60, on right: 58
methodcall (74)
    on left: 61, on right: 59
elist (75)
    on left: 62 63, on right: 55 57 60 61 66 93
commaexprs (76)
    on left: 64 65, on right: 62 64
objectdef (77)
    on left: 66 67, on right: 44
indexed (78)
    on left: 68, on right: 67
commaindex (79)
    on left: 69 70, on right: 68 69
indexedelem (80)
    on left: 71, on right: 68 69
block (81)
    on left: 73, on right: 11 75 77
$@4 (82)
    on left: 72, on right: 73
funcdef (83)
    on left: 75 77, on right: 12 45 57
$@5 (84)
    on left: 74, on right: 75
$@6 (85)
    on left: 76, on right: 77
const (86)
    on left: 78 79 80 81 82 83, on right: 46
idlist (87)
    on left: 85 86, on right: 75 77
$@7 (88)
    on left: 84, on right: 85
idwithcommas (89)
    on left: 88 89, on right: 85 88
$@8 (90)
    on left: 87, on right: 88
ifstmt (91)
    on left: 90 91, on right: 5
whilestmt (92)
    on left: 92, on right: 6
forstmt (93)
    on left: 93, on right: 7
returnstmt (94)
    on left: 94 95, on right: 8


State 0

    0 $accept: . program $end

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    $default  reduce using rule 3 (stmts)

    program     go to state 25
    stmts       go to state 26
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 1

   80 const: MY_STRING .

    $default  reduce using rule 80 (const)


State 2

   90 ifstmt: MY_IF . MY_OPEN_PAR expr MY_CLOSE_PAR stmt
   91       | MY_IF . MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE stmt

    MY_OPEN_PAR  shift, and go to state 43


State 3

   93 forstmt: MY_FOR . MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_OPEN_PAR  shift, and go to state 44


State 4

   92 whilestmt: MY_WHILE . MY_OPEN_PAR expr MY_CLOSE_PAR stmt

    MY_OPEN_PAR  shift, and go to state 45


State 5

   10 stmt: MY_CONTINUE . MY_SEMICOLON

    MY_SEMICOLON  shift, and go to state 46


State 6

    9 stmt: MY_BREAK . MY_SEMICOLON

    MY_SEMICOLON  shift, and go to state 47


State 7

   94 returnstmt: MY_RETURN . MY_SEMICOLON
   95           | MY_RETURN . expr MY_SEMICOLON

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 48

    expr        go to state 49
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 8

   32 term: MY_NOT . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 50
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 9

   48 lvalue: MY_LOCAL . MY_ID

    MY_ID  shift, and go to state 51


State 10

   81 const: MY_NIL .

    $default  reduce using rule 81 (const)


State 11

   82 const: MY_TRUE .

    $default  reduce using rule 82 (const)


State 12

   83 const: MY_FALSE .

    $default  reduce using rule 83 (const)


State 13

   75 funcdef: MY_FUNCTION . $@5 MY_OPEN_PAR idlist MY_CLOSE_PAR block
   77        | MY_FUNCTION . MY_ID $@6 MY_OPEN_PAR idlist MY_CLOSE_PAR block

    MY_ID  shift, and go to state 52

    $default  reduce using rule 74 ($@5)

    $@5  go to state 53


State 14

   47 lvalue: MY_ID .

    $default  reduce using rule 47 (lvalue)


State 15

   79 const: MY_INTEGER .

    $default  reduce using rule 79 (const)


State 16

   78 const: MY_REAL .

    $default  reduce using rule 78 (const)


State 17

   33 term: MY_INC . lvalue

    MY_LOCAL       shift, and go to state 9
    MY_ID          shift, and go to state 14
    MY_OPEN_PAR    shift, and go to state 54
    MY_DOT_STREAM  shift, and go to state 23

    lvalue  go to state 55
    member  go to state 33
    call    go to state 56


State 18

   31 term: MY_MINUS . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 57
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 19

   36 term: MY_DEC . lvalue

    MY_LOCAL       shift, and go to state 9
    MY_ID          shift, and go to state 14
    MY_OPEN_PAR    shift, and go to state 54
    MY_DOT_STREAM  shift, and go to state 23

    lvalue  go to state 58
    member  go to state 33
    call    go to state 56


State 20

   73 block: MY_OPEN_ANG . $@4 stmts MY_CLOSE_ANG

    $default  reduce using rule 72 ($@4)

    $@4  go to state 59


State 21

   66 objectdef: MY_OPEN_BRA . elist MY_CLOSE_BRA
   67          | MY_OPEN_BRA . indexed MY_CLOSE_BRA

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 60
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 63 (elist)

    expr         go to state 61
    term         go to state 29
    assignexpr   go to state 30
    primary      go to state 31
    lvalue       go to state 32
    member       go to state 33
    call         go to state 34
    elist        go to state 62
    objectdef    go to state 35
    indexed      go to state 63
    indexedelem  go to state 64
    const        go to state 38


State 22

   30 term: MY_OPEN_PAR . expr MY_CLOSE_PAR
   45 primary: MY_OPEN_PAR . funcdef MY_CLOSE_PAR
   57 call: MY_OPEN_PAR . funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 65
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    funcdef     go to state 66
    const       go to state 38


State 23

   49 lvalue: MY_DOT_STREAM . MY_ID

    MY_ID  shift, and go to state 67


State 24

   13 stmt: MY_SEMICOLON .

    $default  reduce using rule 13 (stmt)


State 25

    0 $accept: program . $end

    $end  shift, and go to state 68


State 26

    1 program: stmts .

    $default  reduce using rule 1 (program)


State 27

    2 stmts: stmt . stmts

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    $default  reduce using rule 3 (stmts)

    stmts       go to state 69
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 28

    4 stmt: expr . MY_SEMICOLON
   15 expr: expr . operator expr

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_SEMICOLON  shift, and go to state 83

    operator  go to state 84


State 29

   16 expr: term .

    $default  reduce using rule 16 (expr)


State 30

   14 expr: assignexpr .

    $default  reduce using rule 14 (expr)


State 31

   39 term: primary .

    $default  reduce using rule 39 (term)


State 32

   35 term: lvalue . $@1 MY_INC
   38     | lvalue . $@2 MY_DEC
   41 assignexpr: lvalue . $@3 MY_ASSIGN expr
   42 primary: lvalue .
   51 member: lvalue . MY_DOT_SIMPLE MY_ID
   52       | lvalue . MY_OPEN_BRA expr MY_CLOSE_BRA
   56 call: lvalue . callsuffix

    MY_OPEN_BRA    shift, and go to state 85
    MY_OPEN_PAR    shift, and go to state 86
    MY_DOT_SIMPLE  shift, and go to state 87
    MY_DOT_DOUBLE  shift, and go to state 88

    MY_ASSIGN  reduce using rule 40 ($@3)
    MY_INC     reduce using rule 34 ($@1)
    MY_DEC     reduce using rule 37 ($@2)
    $default   reduce using rule 42 (primary)

    $@1         go to state 89
    $@2         go to state 90
    $@3         go to state 91
    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 33

   50 lvalue: member .

    $default  reduce using rule 50 (lvalue)


State 34

   43 primary: call .
   53 member: call . MY_DOT_SIMPLE MY_ID
   54       | call . MY_OPEN_BRA expr MY_CLOSE_BRA
   55 call: call . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_BRA    shift, and go to state 95
    MY_OPEN_PAR    shift, and go to state 96
    MY_DOT_SIMPLE  shift, and go to state 97

    $default  reduce using rule 43 (primary)


State 35

   44 primary: objectdef .

    $default  reduce using rule 44 (primary)


State 36

   11 stmt: block .

    $default  reduce using rule 11 (stmt)


State 37

   12 stmt: funcdef .

    $default  reduce using rule 12 (stmt)


State 38

   46 primary: const .

    $default  reduce using rule 46 (primary)


State 39

    5 stmt: ifstmt .

    $default  reduce using rule 5 (stmt)


State 40

    6 stmt: whilestmt .

    $default  reduce using rule 6 (stmt)


State 41

    7 stmt: forstmt .

    $default  reduce using rule 7 (stmt)


State 42

    8 stmt: returnstmt .

    $default  reduce using rule 8 (stmt)


State 43

   90 ifstmt: MY_IF MY_OPEN_PAR . expr MY_CLOSE_PAR stmt
   91       | MY_IF MY_OPEN_PAR . expr MY_CLOSE_PAR stmt MY_ELSE stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 98
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 44

   93 forstmt: MY_FOR MY_OPEN_PAR . elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 63 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 99
    objectdef   go to state 35
    const       go to state 38


State 45

   92 whilestmt: MY_WHILE MY_OPEN_PAR . expr MY_CLOSE_PAR stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 100
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 46

   10 stmt: MY_CONTINUE MY_SEMICOLON .

    $default  reduce using rule 10 (stmt)


State 47

    9 stmt: MY_BREAK MY_SEMICOLON .

    $default  reduce using rule 9 (stmt)


State 48

   94 returnstmt: MY_RETURN MY_SEMICOLON .

    $default  reduce using rule 94 (returnstmt)


State 49

   15 expr: expr . operator expr
   95 returnstmt: MY_RETURN expr . MY_SEMICOLON

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_SEMICOLON  shift, and go to state 101

    operator  go to state 84


State 50

   15 expr: expr . operator expr
   32 term: MY_NOT expr .

    $default  reduce using rule 32 (term)

    operator  go to state 84


State 51

   48 lvalue: MY_LOCAL MY_ID .

    $default  reduce using rule 48 (lvalue)


State 52

   77 funcdef: MY_FUNCTION MY_ID . $@6 MY_OPEN_PAR idlist MY_CLOSE_PAR block

    $default  reduce using rule 76 ($@6)

    $@6  go to state 102


State 53

   75 funcdef: MY_FUNCTION $@5 . MY_OPEN_PAR idlist MY_CLOSE_PAR block

    MY_OPEN_PAR  shift, and go to state 103


State 54

   57 call: MY_OPEN_PAR . funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_FUNCTION  shift, and go to state 13

    funcdef  go to state 104


State 55

   33 term: MY_INC lvalue .
   51 member: lvalue . MY_DOT_SIMPLE MY_ID
   52       | lvalue . MY_OPEN_BRA expr MY_CLOSE_BRA
   56 call: lvalue . callsuffix

    MY_OPEN_BRA    shift, and go to state 85
    MY_OPEN_PAR    shift, and go to state 86
    MY_DOT_SIMPLE  shift, and go to state 87
    MY_DOT_DOUBLE  shift, and go to state 88

    $default  reduce using rule 33 (term)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 56

   53 member: call . MY_DOT_SIMPLE MY_ID
   54       | call . MY_OPEN_BRA expr MY_CLOSE_BRA
   55 call: call . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_BRA    shift, and go to state 95
    MY_OPEN_PAR    shift, and go to state 96
    MY_DOT_SIMPLE  shift, and go to state 97


State 57

   15 expr: expr . operator expr
   31 term: MY_MINUS expr .

    $default  reduce using rule 31 (term)

    operator  go to state 84


State 58

   36 term: MY_DEC lvalue .
   51 member: lvalue . MY_DOT_SIMPLE MY_ID
   52       | lvalue . MY_OPEN_BRA expr MY_CLOSE_BRA
   56 call: lvalue . callsuffix

    MY_OPEN_BRA    shift, and go to state 85
    MY_OPEN_PAR    shift, and go to state 86
    MY_DOT_SIMPLE  shift, and go to state 87
    MY_DOT_DOUBLE  shift, and go to state 88

    $default  reduce using rule 36 (term)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 59

   73 block: MY_OPEN_ANG $@4 . stmts MY_CLOSE_ANG

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    $default  reduce using rule 3 (stmts)

    stmts       go to state 105
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 60

   71 indexedelem: MY_OPEN_ANG . expr MY_DOT_UD expr MY_CLOSE_ANG

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 106
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 61

   15 expr: expr . operator expr
   62 elist: expr . commaexprs

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82
    MY_COMMA   shift, and go to state 107

    $default  reduce using rule 65 (commaexprs)

    operator    go to state 84
    commaexprs  go to state 108


State 62

   66 objectdef: MY_OPEN_BRA elist . MY_CLOSE_BRA

    MY_CLOSE_BRA  shift, and go to state 109


State 63

   67 objectdef: MY_OPEN_BRA indexed . MY_CLOSE_BRA

    MY_CLOSE_BRA  shift, and go to state 110


State 64

   68 indexed: indexedelem . commaindex

    MY_COMMA  shift, and go to state 111

    $default  reduce using rule 70 (commaindex)

    commaindex  go to state 112


State 65

   15 expr: expr . operator expr
   30 term: MY_OPEN_PAR expr . MY_CLOSE_PAR

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_PAR  shift, and go to state 113

    operator  go to state 84


State 66

   45 primary: MY_OPEN_PAR funcdef . MY_CLOSE_PAR
   57 call: MY_OPEN_PAR funcdef . MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 114


State 67

   49 lvalue: MY_DOT_STREAM MY_ID .

    $default  reduce using rule 49 (lvalue)


State 68

    0 $accept: program $end .

    $default  accept


State 69

    2 stmts: stmt stmts .

    $default  reduce using rule 2 (stmts)


State 70

   28 operator: MY_AND .

    $default  reduce using rule 28 (operator)


State 71

   29 operator: MY_OR .

    $default  reduce using rule 29 (operator)


State 72

   26 operator: MY_EQUAL .

    $default  reduce using rule 26 (operator)


State 73

   27 operator: MY_NEQUAL .

    $default  reduce using rule 27 (operator)


State 74

   17 operator: MY_PLUS .

    $default  reduce using rule 17 (operator)


State 75

   18 operator: MY_MINUS .

    $default  reduce using rule 18 (operator)


State 76

   19 operator: MY_MUL .

    $default  reduce using rule 19 (operator)


State 77

   20 operator: MY_DIV .

    $default  reduce using rule 20 (operator)


State 78

   21 operator: MY_MOD .

    $default  reduce using rule 21 (operator)


State 79

   24 operator: MY_L .

    $default  reduce using rule 24 (operator)


State 80

   25 operator: MY_LE .

    $default  reduce using rule 25 (operator)


State 81

   22 operator: MY_G .

    $default  reduce using rule 22 (operator)


State 82

   23 operator: MY_GE .

    $default  reduce using rule 23 (operator)


State 83

    4 stmt: expr MY_SEMICOLON .

    $default  reduce using rule 4 (stmt)


State 84

   15 expr: expr operator . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 115
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 85

   52 member: lvalue MY_OPEN_BRA . expr MY_CLOSE_BRA

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 116
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 86

   60 normcall: MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 63 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 117
    objectdef   go to state 35
    const       go to state 38


State 87

   51 member: lvalue MY_DOT_SIMPLE . MY_ID

    MY_ID  shift, and go to state 118


State 88

   61 methodcall: MY_DOT_DOUBLE . MY_ID MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_ID  shift, and go to state 119


State 89

   35 term: lvalue $@1 . MY_INC

    MY_INC  shift, and go to state 120


State 90

   38 term: lvalue $@2 . MY_DEC

    MY_DEC  shift, and go to state 121


State 91

   41 assignexpr: lvalue $@3 . MY_ASSIGN expr

    MY_ASSIGN  shift, and go to state 122


State 92

   56 call: lvalue callsuffix .

    $default  reduce using rule 56 (call)


State 93

   58 callsuffix: normcall .

    $default  reduce using rule 58 (callsuffix)


State 94

   59 callsuffix: methodcall .

    $default  reduce using rule 59 (callsuffix)


State 95

   54 member: call MY_OPEN_BRA . expr MY_CLOSE_BRA

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 123
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 96

   55 call: call MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 63 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 124
    objectdef   go to state 35
    const       go to state 38


State 97

   53 member: call MY_DOT_SIMPLE . MY_ID

    MY_ID  shift, and go to state 125


State 98

   15 expr: expr . operator expr
   90 ifstmt: MY_IF MY_OPEN_PAR expr . MY_CLOSE_PAR stmt
   91       | MY_IF MY_OPEN_PAR expr . MY_CLOSE_PAR stmt MY_ELSE stmt

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_PAR  shift, and go to state 126

    operator  go to state 84


State 99

   93 forstmt: MY_FOR MY_OPEN_PAR elist . MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_SEMICOLON  shift, and go to state 127


State 100

   15 expr: expr . operator expr
   92 whilestmt: MY_WHILE MY_OPEN_PAR expr . MY_CLOSE_PAR stmt

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_PAR  shift, and go to state 128

    operator  go to state 84


State 101

   95 returnstmt: MY_RETURN expr MY_SEMICOLON .

    $default  reduce using rule 95 (returnstmt)


State 102

   77 funcdef: MY_FUNCTION MY_ID $@6 . MY_OPEN_PAR idlist MY_CLOSE_PAR block

    MY_OPEN_PAR  shift, and go to state 129


State 103

   75 funcdef: MY_FUNCTION $@5 MY_OPEN_PAR . idlist MY_CLOSE_PAR block

    MY_ID  shift, and go to state 130

    $default  reduce using rule 86 (idlist)

    idlist  go to state 131


State 104

   57 call: MY_OPEN_PAR funcdef . MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 132


State 105

   73 block: MY_OPEN_ANG $@4 stmts . MY_CLOSE_ANG

    MY_CLOSE_ANG  shift, and go to state 133


State 106

   15 expr: expr . operator expr
   71 indexedelem: MY_OPEN_ANG expr . MY_DOT_UD expr MY_CLOSE_ANG

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82
    MY_DOT_UD  shift, and go to state 134

    operator  go to state 84


State 107

   64 commaexprs: MY_COMMA . expr commaexprs

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 135
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 108

   62 elist: expr commaexprs .

    $default  reduce using rule 62 (elist)


State 109

   66 objectdef: MY_OPEN_BRA elist MY_CLOSE_BRA .

    $default  reduce using rule 66 (objectdef)


State 110

   67 objectdef: MY_OPEN_BRA indexed MY_CLOSE_BRA .

    $default  reduce using rule 67 (objectdef)


State 111

   69 commaindex: MY_COMMA . indexedelem commaindex

    MY_OPEN_ANG  shift, and go to state 60

    indexedelem  go to state 136


State 112

   68 indexed: indexedelem commaindex .

    $default  reduce using rule 68 (indexed)


State 113

   30 term: MY_OPEN_PAR expr MY_CLOSE_PAR .

    $default  reduce using rule 30 (term)


State 114

   45 primary: MY_OPEN_PAR funcdef MY_CLOSE_PAR .
   57 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_PAR  shift, and go to state 137

    $default  reduce using rule 45 (primary)


State 115

   15 expr: expr . operator expr
   15     | expr operator expr .

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82

    MY_AND     [reduce using rule 15 (expr)]
    MY_OR      [reduce using rule 15 (expr)]
    MY_EQUAL   [reduce using rule 15 (expr)]
    MY_NEQUAL  [reduce using rule 15 (expr)]
    MY_PLUS    [reduce using rule 15 (expr)]
    MY_MINUS   [reduce using rule 15 (expr)]
    MY_MUL     [reduce using rule 15 (expr)]
    MY_DIV     [reduce using rule 15 (expr)]
    MY_MOD     [reduce using rule 15 (expr)]
    MY_L       [reduce using rule 15 (expr)]
    MY_LE      [reduce using rule 15 (expr)]
    MY_G       [reduce using rule 15 (expr)]
    MY_GE      [reduce using rule 15 (expr)]
    $default   reduce using rule 15 (expr)

    operator  go to state 84


State 116

   15 expr: expr . operator expr
   52 member: lvalue MY_OPEN_BRA expr . MY_CLOSE_BRA

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_BRA  shift, and go to state 138

    operator  go to state 84


State 117

   60 normcall: MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 139


State 118

   51 member: lvalue MY_DOT_SIMPLE MY_ID .

    $default  reduce using rule 51 (member)


State 119

   61 methodcall: MY_DOT_DOUBLE MY_ID . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_PAR  shift, and go to state 140


State 120

   35 term: lvalue $@1 MY_INC .

    $default  reduce using rule 35 (term)


State 121

   38 term: lvalue $@2 MY_DEC .

    $default  reduce using rule 38 (term)


State 122

   41 assignexpr: lvalue $@3 MY_ASSIGN . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 141
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 123

   15 expr: expr . operator expr
   54 member: call MY_OPEN_BRA expr . MY_CLOSE_BRA

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_BRA  shift, and go to state 142

    operator  go to state 84


State 124

   55 call: call MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 143


State 125

   53 member: call MY_DOT_SIMPLE MY_ID .

    $default  reduce using rule 53 (member)


State 126

   90 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR . stmt
   91       | MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR . stmt MY_ELSE stmt

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 144
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 127

   93 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON . expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 145
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 128

   92 whilestmt: MY_WHILE MY_OPEN_PAR expr MY_CLOSE_PAR . stmt

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 146
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 129

   77 funcdef: MY_FUNCTION MY_ID $@6 MY_OPEN_PAR . idlist MY_CLOSE_PAR block

    MY_ID  shift, and go to state 130

    $default  reduce using rule 86 (idlist)

    idlist  go to state 147


State 130

   85 idlist: MY_ID . $@7 idwithcommas

    $default  reduce using rule 84 ($@7)

    $@7  go to state 148


State 131

   75 funcdef: MY_FUNCTION $@5 MY_OPEN_PAR idlist . MY_CLOSE_PAR block

    MY_CLOSE_PAR  shift, and go to state 149


State 132

   57 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_PAR  shift, and go to state 137


State 133

   73 block: MY_OPEN_ANG $@4 stmts MY_CLOSE_ANG .

    $default  reduce using rule 73 (block)


State 134

   71 indexedelem: MY_OPEN_ANG expr MY_DOT_UD . expr MY_CLOSE_ANG

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 150
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 135

   15 expr: expr . operator expr
   64 commaexprs: MY_COMMA expr . commaexprs

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82
    MY_COMMA   shift, and go to state 107

    $default  reduce using rule 65 (commaexprs)

    operator    go to state 84
    commaexprs  go to state 151


State 136

   69 commaindex: MY_COMMA indexedelem . commaindex

    MY_COMMA  shift, and go to state 111

    $default  reduce using rule 70 (commaindex)

    commaindex  go to state 152


State 137

   57 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 63 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 153
    objectdef   go to state 35
    const       go to state 38


State 138

   52 member: lvalue MY_OPEN_BRA expr MY_CLOSE_BRA .

    $default  reduce using rule 52 (member)


State 139

   60 normcall: MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 60 (normcall)


State 140

   61 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 63 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 154
    objectdef   go to state 35
    const       go to state 38


State 141

   15 expr: expr . operator expr
   41 assignexpr: lvalue $@3 MY_ASSIGN expr .

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82

    $default  reduce using rule 41 (assignexpr)

    operator  go to state 84


State 142

   54 member: call MY_OPEN_BRA expr MY_CLOSE_BRA .

    $default  reduce using rule 54 (member)


State 143

   55 call: call MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 55 (call)


State 144

   90 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt .
   91       | MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt . MY_ELSE stmt

    MY_ELSE  shift, and go to state 155

    MY_ELSE   [reduce using rule 90 (ifstmt)]
    $default  reduce using rule 90 (ifstmt)


State 145

   15 expr: expr . operator expr
   93 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr . MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_SEMICOLON  shift, and go to state 156

    operator  go to state 84


State 146

   92 whilestmt: MY_WHILE MY_OPEN_PAR expr MY_CLOSE_PAR stmt .

    $default  reduce using rule 92 (whilestmt)


State 147

   77 funcdef: MY_FUNCTION MY_ID $@6 MY_OPEN_PAR idlist . MY_CLOSE_PAR block

    MY_CLOSE_PAR  shift, and go to state 157


State 148

   85 idlist: MY_ID $@7 . idwithcommas

    MY_COMMA  shift, and go to state 158

    $default  reduce using rule 89 (idwithcommas)

    idwithcommas  go to state 159


State 149

   75 funcdef: MY_FUNCTION $@5 MY_OPEN_PAR idlist MY_CLOSE_PAR . block

    MY_OPEN_ANG  shift, and go to state 20

    block  go to state 160


State 150

   15 expr: expr . operator expr
   71 indexedelem: MY_OPEN_ANG expr MY_DOT_UD expr . MY_CLOSE_ANG

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_ANG  shift, and go to state 161

    operator  go to state 84


State 151

   64 commaexprs: MY_COMMA expr commaexprs .

    $default  reduce using rule 64 (commaexprs)


State 152

   69 commaindex: MY_COMMA indexedelem commaindex .

    $default  reduce using rule 69 (commaindex)


State 153

   57 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 162


State 154

   61 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 163


State 155

   91 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE . stmt

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 164
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 156

   93 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON . elist MY_CLOSE_PAR stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 63 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 165
    objectdef   go to state 35
    const       go to state 38


State 157

   77 funcdef: MY_FUNCTION MY_ID $@6 MY_OPEN_PAR idlist MY_CLOSE_PAR . block

    MY_OPEN_ANG  shift, and go to state 20

    block  go to state 166


State 158

   88 idwithcommas: MY_COMMA . MY_ID $@8 idwithcommas

    MY_ID  shift, and go to state 167


State 159

   85 idlist: MY_ID $@7 idwithcommas .

    $default  reduce using rule 85 (idlist)


State 160

   75 funcdef: MY_FUNCTION $@5 MY_OPEN_PAR idlist MY_CLOSE_PAR block .

    $default  reduce using rule 75 (funcdef)


State 161

   71 indexedelem: MY_OPEN_ANG expr MY_DOT_UD expr MY_CLOSE_ANG .

    $default  reduce using rule 71 (indexedelem)


State 162

   57 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 57 (call)


State 163

   61 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 61 (methodcall)


State 164

   91 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE stmt .

    $default  reduce using rule 91 (ifstmt)


State 165

   93 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist . MY_CLOSE_PAR stmt

    MY_CLOSE_PAR  shift, and go to state 168


State 166

   77 funcdef: MY_FUNCTION MY_ID $@6 MY_OPEN_PAR idlist MY_CLOSE_PAR block .

    $default  reduce using rule 77 (funcdef)


State 167

   88 idwithcommas: MY_COMMA MY_ID . $@8 idwithcommas

    $default  reduce using rule 87 ($@8)

    $@8  go to state 169


State 168

   93 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR . stmt

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 170
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 169

   88 idwithcommas: MY_COMMA MY_ID $@8 . idwithcommas

    MY_COMMA  shift, and go to state 158

    $default  reduce using rule 89 (idwithcommas)

    idwithcommas  go to state 171


State 170

   93 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt .

    $default  reduce using rule 93 (forstmt)


State 171

   88 idwithcommas: MY_COMMA MY_ID $@8 idwithcommas .

    $default  reduce using rule 88 (idwithcommas)
