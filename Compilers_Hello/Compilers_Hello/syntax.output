Terminals unused in grammar

   MY_MULTILINE_COMMENTS
   MY_SIMPLE_COMMENTS
   MY_DO
   MY_GLOBAL
   MY_STATIC
   MY_BLANK
   MY_NL
   MY_OTHER


State 155 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmts

    2 $@1: %empty

    3 stmts: stmt $@1 stmts
    4      | %empty

    5 stmt: expr MY_SEMICOLON
    6     | ifstmt
    7     | whilestmt
    8     | forstmt
    9     | returnstmt
   10     | MY_BREAK MY_SEMICOLON
   11     | MY_CONTINUE MY_SEMICOLON
   12     | block
   13     | funcdef
   14     | MY_SEMICOLON

   15 expr: assignexpr
   16     | expr MY_PLUS expr
   17     | expr MY_MINUS expr
   18     | expr MY_MUL expr
   19     | expr MY_DIV expr
   20     | expr MY_MOD expr
   21     | expr MY_G expr
   22     | expr MY_GE expr
   23     | expr MY_L expr
   24     | expr MY_LE expr
   25     | expr MY_EQUAL expr
   26     | expr MY_NEQUAL expr
   27     | expr MY_AND expr
   28     | expr MY_OR expr
   29     | term

   30 term: MY_OPEN_PAR expr MY_CLOSE_PAR
   31     | MY_MINUS expr
   32     | MY_NOT expr
   33     | MY_INC lvalue

   34 $@2: %empty

   35 term: lvalue $@2 MY_INC
   36     | MY_DEC lvalue

   37 $@3: %empty

   38 term: lvalue $@3 MY_DEC
   39     | primary

   40 $@4: %empty

   41 assignexpr: lvalue $@4 MY_ASSIGN expr

   42 primary: lvalue
   43        | call
   44        | objectdef
   45        | MY_OPEN_PAR funcdef MY_CLOSE_PAR
   46        | const

   47 lvalue: MY_ID
   48       | MY_LOCAL MY_ID
   49       | MY_DOT_STREAM MY_ID
   50       | member

   51 member: lvalue MY_DOT_SIMPLE MY_ID
   52       | lvalue MY_OPEN_BRA expr MY_CLOSE_BRA
   53       | call MY_DOT_SIMPLE MY_ID
   54       | call MY_OPEN_BRA expr MY_CLOSE_BRA

   55 call: call MY_OPEN_PAR elist MY_CLOSE_PAR
   56     | lvalue callsuffix
   57     | MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

   58 callsuffix: normcall
   59           | methodcall

   60 normcall: MY_OPEN_PAR elist MY_CLOSE_PAR

   61 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR elist MY_CLOSE_PAR

   62 elist: expr commaexprs
   63      | %empty

   64 commaexprs: MY_COMMA expr commaexprs
   65           | %empty

   66 $@5: %empty

   67 objectdef: MY_OPEN_BRA $@5 elist MY_CLOSE_BRA

   68 $@6: %empty

   69 objectdef: MY_OPEN_BRA $@6 indexed MY_CLOSE_BRA

   70 indexed: indexedelem commaindex

   71 commaindex: MY_COMMA indexedelem commaindex
   72           | %empty

   73 indexedelem: MY_OPEN_ANG expr MY_DOT_UD expr MY_CLOSE_ANG

   74 $@7: %empty

   75 block: MY_OPEN_ANG $@7 stmts MY_CLOSE_ANG

   76 $@8: %empty

   77 funblock: MY_OPEN_ANG $@8 stmts MY_CLOSE_ANG

   78 $@9: %empty

   79 funcdef: MY_FUNCTION $@9 MY_OPEN_PAR idlist MY_CLOSE_PAR funblock

   80 $@10: %empty

   81 funcdef: MY_FUNCTION MY_ID $@10 MY_OPEN_PAR idlist MY_CLOSE_PAR funblock

   82 const: MY_REAL
   83      | MY_INTEGER
   84      | MY_STRING
   85      | MY_NIL
   86      | MY_TRUE
   87      | MY_FALSE

   88 $@11: %empty

   89 idlist: MY_ID $@11 idwithcommas
   90       | %empty

   91 $@12: %empty

   92 idwithcommas: MY_COMMA MY_ID $@12 idwithcommas
   93             | %empty

   94 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt
   95       | MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE stmt

   96 whilestmt: MY_WHILE MY_OPEN_PAR expr MY_CLOSE_PAR stmt

   97 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

   98 returnstmt: MY_RETURN MY_SEMICOLON
   99           | MY_RETURN expr MY_SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
MY_INTEGER (258) 83
MY_REAL (259) 82
MY_STRING (260) 84
MY_MULTILINE_COMMENTS (261)
MY_SIMPLE_COMMENTS (262)
MY_IF (263) 94 95
MY_ELSE (264) 95
MY_FOR (265) 97
MY_WHILE (266) 96
MY_DO (267)
MY_CONTINUE (268) 11
MY_BREAK (269) 10
MY_RETURN (270) 98 99
MY_AND (271) 27
MY_OR (272) 28
MY_NOT (273) 32
MY_LOCAL (274) 48
MY_GLOBAL (275)
MY_STATIC (276)
MY_NIL (277) 85
MY_TRUE (278) 86
MY_FALSE (279) 87
MY_FUNCTION (280) 79 81
MY_ID (281) 47 48 49 51 53 61 81 89 92
MY_BLANK (282)
MY_NL (283)
MY_ASSIGN (284) 41
MY_EQUAL (285) 25
MY_NEQUAL (286) 26
MY_PLUS (287) 16
MY_INC (288) 33 35
MY_MINUS (289) 17 31
MY_DEC (290) 36 38
MY_MUL (291) 18
MY_DIV (292) 19
MY_MOD (293) 20
MY_L (294) 23
MY_LE (295) 24
MY_G (296) 21
MY_GE (297) 22
MY_OPEN_ANG (298) 73 75 77
MY_OPEN_BRA (299) 52 54 67 69
MY_OPEN_PAR (300) 30 45 55 57 60 61 79 81 94 95 96 97
MY_CLOSE_ANG (301) 73 75 77
MY_CLOSE_BRA (302) 52 54 67 69
MY_CLOSE_PAR (303) 30 45 55 57 60 61 79 81 94 95 96 97
MY_DOT_UD (304) 73
MY_DOT_STREAM (305) 49
MY_DOT_SIMPLE (306) 51 53
MY_DOT_DOUBLE (307) 61
MY_COMMA (308) 64 71 92
MY_SEMICOLON (309) 5 10 11 14 97 98 99
MY_OTHER (310)
UNARY_MINUS (311)


Nonterminals, with rules where they appear

$accept (57)
    on left: 0
program (58)
    on left: 1, on right: 0
stmts (59)
    on left: 3 4, on right: 1 3 75 77
$@1 (60)
    on left: 2, on right: 3
stmt (61)
    on left: 5 6 7 8 9 10 11 12 13 14, on right: 3 94 95 96 97
expr (62)
    on left: 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29, on right:
    5 16 17 18 19 20 21 22 23 24 25 26 27 28 30 31 32 41 52 54 62 64
    73 94 95 96 97 99
term (63)
    on left: 30 31 32 33 35 36 38 39, on right: 29
$@2 (64)
    on left: 34, on right: 35
$@3 (65)
    on left: 37, on right: 38
assignexpr (66)
    on left: 41, on right: 15
$@4 (67)
    on left: 40, on right: 41
primary (68)
    on left: 42 43 44 45 46, on right: 39
lvalue (69)
    on left: 47 48 49 50, on right: 33 35 36 38 41 42 51 52 56
member (70)
    on left: 51 52 53 54, on right: 50
call (71)
    on left: 55 56 57, on right: 43 53 54 55
callsuffix (72)
    on left: 58 59, on right: 56
normcall (73)
    on left: 60, on right: 58
methodcall (74)
    on left: 61, on right: 59
elist (75)
    on left: 62 63, on right: 55 57 60 61 67 97
commaexprs (76)
    on left: 64 65, on right: 62 64
objectdef (77)
    on left: 67 69, on right: 44
$@5 (78)
    on left: 66, on right: 67
$@6 (79)
    on left: 68, on right: 69
indexed (80)
    on left: 70, on right: 69
commaindex (81)
    on left: 71 72, on right: 70 71
indexedelem (82)
    on left: 73, on right: 70 71
block (83)
    on left: 75, on right: 12
$@7 (84)
    on left: 74, on right: 75
funblock (85)
    on left: 77, on right: 79 81
$@8 (86)
    on left: 76, on right: 77
funcdef (87)
    on left: 79 81, on right: 13 45 57
$@9 (88)
    on left: 78, on right: 79
$@10 (89)
    on left: 80, on right: 81
const (90)
    on left: 82 83 84 85 86 87, on right: 46
idlist (91)
    on left: 89 90, on right: 79 81
$@11 (92)
    on left: 88, on right: 89
idwithcommas (93)
    on left: 92 93, on right: 89 92
$@12 (94)
    on left: 91, on right: 92
ifstmt (95)
    on left: 94 95, on right: 6
whilestmt (96)
    on left: 96, on right: 7
forstmt (97)
    on left: 97, on right: 8
returnstmt (98)
    on left: 98 99, on right: 9


State 0

    0 $accept: . program $end

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_IF          shift, and go to state 4
    MY_FOR         shift, and go to state 5
    MY_WHILE       shift, and go to state 6
    MY_CONTINUE    shift, and go to state 7
    MY_BREAK       shift, and go to state 8
    MY_RETURN      shift, and go to state 9
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_FUNCTION    shift, and go to state 15
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    $default  reduce using rule 4 (stmts)

    program     go to state 25
    stmts       go to state 26
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 1

   83 const: MY_INTEGER .

    $default  reduce using rule 83 (const)


State 2

   82 const: MY_REAL .

    $default  reduce using rule 82 (const)


State 3

   84 const: MY_STRING .

    $default  reduce using rule 84 (const)


State 4

   94 ifstmt: MY_IF . MY_OPEN_PAR expr MY_CLOSE_PAR stmt
   95       | MY_IF . MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE stmt

    MY_OPEN_PAR  shift, and go to state 43


State 5

   97 forstmt: MY_FOR . MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_OPEN_PAR  shift, and go to state 44


State 6

   96 whilestmt: MY_WHILE . MY_OPEN_PAR expr MY_CLOSE_PAR stmt

    MY_OPEN_PAR  shift, and go to state 45


State 7

   11 stmt: MY_CONTINUE . MY_SEMICOLON

    MY_SEMICOLON  shift, and go to state 46


State 8

   10 stmt: MY_BREAK . MY_SEMICOLON

    MY_SEMICOLON  shift, and go to state 47


State 9

   98 returnstmt: MY_RETURN . MY_SEMICOLON
   99           | MY_RETURN . expr MY_SEMICOLON

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 48

    expr        go to state 49
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 10

   32 term: MY_NOT . expr

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 50
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 11

   48 lvalue: MY_LOCAL . MY_ID

    MY_ID  shift, and go to state 51


State 12

   85 const: MY_NIL .

    $default  reduce using rule 85 (const)


State 13

   86 const: MY_TRUE .

    $default  reduce using rule 86 (const)


State 14

   87 const: MY_FALSE .

    $default  reduce using rule 87 (const)


State 15

   79 funcdef: MY_FUNCTION . $@9 MY_OPEN_PAR idlist MY_CLOSE_PAR funblock
   81        | MY_FUNCTION . MY_ID $@10 MY_OPEN_PAR idlist MY_CLOSE_PAR funblock

    MY_ID  shift, and go to state 52

    $default  reduce using rule 78 ($@9)

    $@9  go to state 53


State 16

   47 lvalue: MY_ID .

    $default  reduce using rule 47 (lvalue)


State 17

   33 term: MY_INC . lvalue

    MY_LOCAL       shift, and go to state 11
    MY_ID          shift, and go to state 16
    MY_OPEN_PAR    shift, and go to state 54
    MY_DOT_STREAM  shift, and go to state 23

    lvalue  go to state 55
    member  go to state 33
    call    go to state 56


State 18

   31 term: MY_MINUS . expr

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 57
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 19

   36 term: MY_DEC . lvalue

    MY_LOCAL       shift, and go to state 11
    MY_ID          shift, and go to state 16
    MY_OPEN_PAR    shift, and go to state 54
    MY_DOT_STREAM  shift, and go to state 23

    lvalue  go to state 58
    member  go to state 33
    call    go to state 56


State 20

   75 block: MY_OPEN_ANG . $@7 stmts MY_CLOSE_ANG

    $default  reduce using rule 74 ($@7)

    $@7  go to state 59


State 21

   67 objectdef: MY_OPEN_BRA . $@5 elist MY_CLOSE_BRA
   69          | MY_OPEN_BRA . $@6 indexed MY_CLOSE_BRA

    MY_OPEN_ANG  reduce using rule 68 ($@6)
    $default     reduce using rule 66 ($@5)

    $@5  go to state 60
    $@6  go to state 61


State 22

   30 term: MY_OPEN_PAR . expr MY_CLOSE_PAR
   45 primary: MY_OPEN_PAR . funcdef MY_CLOSE_PAR
   57 call: MY_OPEN_PAR . funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_FUNCTION    shift, and go to state 15
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 62
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    funcdef     go to state 63
    const       go to state 38


State 23

   49 lvalue: MY_DOT_STREAM . MY_ID

    MY_ID  shift, and go to state 64


State 24

   14 stmt: MY_SEMICOLON .

    $default  reduce using rule 14 (stmt)


State 25

    0 $accept: program . $end

    $end  shift, and go to state 65


State 26

    1 program: stmts .

    $default  reduce using rule 1 (program)


State 27

    3 stmts: stmt . $@1 stmts

    $default  reduce using rule 2 ($@1)

    $@1  go to state 66


State 28

    5 stmt: expr . MY_SEMICOLON
   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr

    MY_AND        shift, and go to state 67
    MY_OR         shift, and go to state 68
    MY_EQUAL      shift, and go to state 69
    MY_NEQUAL     shift, and go to state 70
    MY_PLUS       shift, and go to state 71
    MY_MINUS      shift, and go to state 72
    MY_MUL        shift, and go to state 73
    MY_DIV        shift, and go to state 74
    MY_MOD        shift, and go to state 75
    MY_L          shift, and go to state 76
    MY_LE         shift, and go to state 77
    MY_G          shift, and go to state 78
    MY_GE         shift, and go to state 79
    MY_SEMICOLON  shift, and go to state 80


State 29

   29 expr: term .

    $default  reduce using rule 29 (expr)


State 30

   15 expr: assignexpr .

    $default  reduce using rule 15 (expr)


State 31

   39 term: primary .

    $default  reduce using rule 39 (term)


State 32

   35 term: lvalue . $@2 MY_INC
   38     | lvalue . $@3 MY_DEC
   41 assignexpr: lvalue . $@4 MY_ASSIGN expr
   42 primary: lvalue .
   51 member: lvalue . MY_DOT_SIMPLE MY_ID
   52       | lvalue . MY_OPEN_BRA expr MY_CLOSE_BRA
   56 call: lvalue . callsuffix

    MY_OPEN_BRA    shift, and go to state 81
    MY_OPEN_PAR    shift, and go to state 82
    MY_DOT_SIMPLE  shift, and go to state 83
    MY_DOT_DOUBLE  shift, and go to state 84

    MY_ASSIGN  reduce using rule 40 ($@4)
    MY_INC     reduce using rule 34 ($@2)
    MY_DEC     reduce using rule 37 ($@3)
    $default   reduce using rule 42 (primary)

    $@2         go to state 85
    $@3         go to state 86
    $@4         go to state 87
    callsuffix  go to state 88
    normcall    go to state 89
    methodcall  go to state 90


State 33

   50 lvalue: member .

    $default  reduce using rule 50 (lvalue)


State 34

   43 primary: call .
   53 member: call . MY_DOT_SIMPLE MY_ID
   54       | call . MY_OPEN_BRA expr MY_CLOSE_BRA
   55 call: call . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_BRA    shift, and go to state 91
    MY_OPEN_PAR    shift, and go to state 92
    MY_DOT_SIMPLE  shift, and go to state 93

    $default  reduce using rule 43 (primary)


State 35

   44 primary: objectdef .

    $default  reduce using rule 44 (primary)


State 36

   12 stmt: block .

    $default  reduce using rule 12 (stmt)


State 37

   13 stmt: funcdef .

    $default  reduce using rule 13 (stmt)


State 38

   46 primary: const .

    $default  reduce using rule 46 (primary)


State 39

    6 stmt: ifstmt .

    $default  reduce using rule 6 (stmt)


State 40

    7 stmt: whilestmt .

    $default  reduce using rule 7 (stmt)


State 41

    8 stmt: forstmt .

    $default  reduce using rule 8 (stmt)


State 42

    9 stmt: returnstmt .

    $default  reduce using rule 9 (stmt)


State 43

   94 ifstmt: MY_IF MY_OPEN_PAR . expr MY_CLOSE_PAR stmt
   95       | MY_IF MY_OPEN_PAR . expr MY_CLOSE_PAR stmt MY_ELSE stmt

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 94
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 44

   97 forstmt: MY_FOR MY_OPEN_PAR . elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 63 (elist)

    expr        go to state 95
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 96
    objectdef   go to state 35
    const       go to state 38


State 45

   96 whilestmt: MY_WHILE MY_OPEN_PAR . expr MY_CLOSE_PAR stmt

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 97
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 46

   11 stmt: MY_CONTINUE MY_SEMICOLON .

    $default  reduce using rule 11 (stmt)


State 47

   10 stmt: MY_BREAK MY_SEMICOLON .

    $default  reduce using rule 10 (stmt)


State 48

   98 returnstmt: MY_RETURN MY_SEMICOLON .

    $default  reduce using rule 98 (returnstmt)


State 49

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr
   99 returnstmt: MY_RETURN expr . MY_SEMICOLON

    MY_AND        shift, and go to state 67
    MY_OR         shift, and go to state 68
    MY_EQUAL      shift, and go to state 69
    MY_NEQUAL     shift, and go to state 70
    MY_PLUS       shift, and go to state 71
    MY_MINUS      shift, and go to state 72
    MY_MUL        shift, and go to state 73
    MY_DIV        shift, and go to state 74
    MY_MOD        shift, and go to state 75
    MY_L          shift, and go to state 76
    MY_LE         shift, and go to state 77
    MY_G          shift, and go to state 78
    MY_GE         shift, and go to state 79
    MY_SEMICOLON  shift, and go to state 98


State 50

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr
   32 term: MY_NOT expr .

    $default  reduce using rule 32 (term)


State 51

   48 lvalue: MY_LOCAL MY_ID .

    $default  reduce using rule 48 (lvalue)


State 52

   81 funcdef: MY_FUNCTION MY_ID . $@10 MY_OPEN_PAR idlist MY_CLOSE_PAR funblock

    $default  reduce using rule 80 ($@10)

    $@10  go to state 99


State 53

   79 funcdef: MY_FUNCTION $@9 . MY_OPEN_PAR idlist MY_CLOSE_PAR funblock

    MY_OPEN_PAR  shift, and go to state 100


State 54

   57 call: MY_OPEN_PAR . funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_FUNCTION  shift, and go to state 15

    funcdef  go to state 101


State 55

   33 term: MY_INC lvalue .
   51 member: lvalue . MY_DOT_SIMPLE MY_ID
   52       | lvalue . MY_OPEN_BRA expr MY_CLOSE_BRA
   56 call: lvalue . callsuffix

    MY_OPEN_BRA    shift, and go to state 81
    MY_OPEN_PAR    shift, and go to state 82
    MY_DOT_SIMPLE  shift, and go to state 83
    MY_DOT_DOUBLE  shift, and go to state 84

    $default  reduce using rule 33 (term)

    callsuffix  go to state 88
    normcall    go to state 89
    methodcall  go to state 90


State 56

   53 member: call . MY_DOT_SIMPLE MY_ID
   54       | call . MY_OPEN_BRA expr MY_CLOSE_BRA
   55 call: call . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_BRA    shift, and go to state 91
    MY_OPEN_PAR    shift, and go to state 92
    MY_DOT_SIMPLE  shift, and go to state 93


State 57

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr
   31 term: MY_MINUS expr .

    $default  reduce using rule 31 (term)


State 58

   36 term: MY_DEC lvalue .
   51 member: lvalue . MY_DOT_SIMPLE MY_ID
   52       | lvalue . MY_OPEN_BRA expr MY_CLOSE_BRA
   56 call: lvalue . callsuffix

    MY_OPEN_BRA    shift, and go to state 81
    MY_OPEN_PAR    shift, and go to state 82
    MY_DOT_SIMPLE  shift, and go to state 83
    MY_DOT_DOUBLE  shift, and go to state 84

    $default  reduce using rule 36 (term)

    callsuffix  go to state 88
    normcall    go to state 89
    methodcall  go to state 90


State 59

   75 block: MY_OPEN_ANG $@7 . stmts MY_CLOSE_ANG

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_IF          shift, and go to state 4
    MY_FOR         shift, and go to state 5
    MY_WHILE       shift, and go to state 6
    MY_CONTINUE    shift, and go to state 7
    MY_BREAK       shift, and go to state 8
    MY_RETURN      shift, and go to state 9
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_FUNCTION    shift, and go to state 15
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    $default  reduce using rule 4 (stmts)

    stmts       go to state 102
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 60

   67 objectdef: MY_OPEN_BRA $@5 . elist MY_CLOSE_BRA

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 63 (elist)

    expr        go to state 95
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 103
    objectdef   go to state 35
    const       go to state 38


State 61

   69 objectdef: MY_OPEN_BRA $@6 . indexed MY_CLOSE_BRA

    MY_OPEN_ANG  shift, and go to state 104

    indexed      go to state 105
    indexedelem  go to state 106


State 62

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr
   30 term: MY_OPEN_PAR expr . MY_CLOSE_PAR

    MY_AND        shift, and go to state 67
    MY_OR         shift, and go to state 68
    MY_EQUAL      shift, and go to state 69
    MY_NEQUAL     shift, and go to state 70
    MY_PLUS       shift, and go to state 71
    MY_MINUS      shift, and go to state 72
    MY_MUL        shift, and go to state 73
    MY_DIV        shift, and go to state 74
    MY_MOD        shift, and go to state 75
    MY_L          shift, and go to state 76
    MY_LE         shift, and go to state 77
    MY_G          shift, and go to state 78
    MY_GE         shift, and go to state 79
    MY_CLOSE_PAR  shift, and go to state 107


State 63

   45 primary: MY_OPEN_PAR funcdef . MY_CLOSE_PAR
   57 call: MY_OPEN_PAR funcdef . MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 108


State 64

   49 lvalue: MY_DOT_STREAM MY_ID .

    $default  reduce using rule 49 (lvalue)


State 65

    0 $accept: program $end .

    $default  accept


State 66

    3 stmts: stmt $@1 . stmts

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_IF          shift, and go to state 4
    MY_FOR         shift, and go to state 5
    MY_WHILE       shift, and go to state 6
    MY_CONTINUE    shift, and go to state 7
    MY_BREAK       shift, and go to state 8
    MY_RETURN      shift, and go to state 9
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_FUNCTION    shift, and go to state 15
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    $default  reduce using rule 4 (stmts)

    stmts       go to state 109
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 67

   27 expr: expr MY_AND . expr

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 110
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 68

   28 expr: expr MY_OR . expr

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 111
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 69

   25 expr: expr MY_EQUAL . expr

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 112
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 70

   26 expr: expr MY_NEQUAL . expr

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 113
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 71

   16 expr: expr MY_PLUS . expr

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 114
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 72

   17 expr: expr MY_MINUS . expr

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 115
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 73

   18 expr: expr MY_MUL . expr

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 116
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 74

   19 expr: expr MY_DIV . expr

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 117
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 75

   20 expr: expr MY_MOD . expr

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 118
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 76

   23 expr: expr MY_L . expr

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 119
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 77

   24 expr: expr MY_LE . expr

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 120
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 78

   21 expr: expr MY_G . expr

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 121
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 79

   22 expr: expr MY_GE . expr

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 122
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 80

    5 stmt: expr MY_SEMICOLON .

    $default  reduce using rule 5 (stmt)


State 81

   52 member: lvalue MY_OPEN_BRA . expr MY_CLOSE_BRA

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 123
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 82

   60 normcall: MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 63 (elist)

    expr        go to state 95
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 124
    objectdef   go to state 35
    const       go to state 38


State 83

   51 member: lvalue MY_DOT_SIMPLE . MY_ID

    MY_ID  shift, and go to state 125


State 84

   61 methodcall: MY_DOT_DOUBLE . MY_ID MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_ID  shift, and go to state 126


State 85

   35 term: lvalue $@2 . MY_INC

    MY_INC  shift, and go to state 127


State 86

   38 term: lvalue $@3 . MY_DEC

    MY_DEC  shift, and go to state 128


State 87

   41 assignexpr: lvalue $@4 . MY_ASSIGN expr

    MY_ASSIGN  shift, and go to state 129


State 88

   56 call: lvalue callsuffix .

    $default  reduce using rule 56 (call)


State 89

   58 callsuffix: normcall .

    $default  reduce using rule 58 (callsuffix)


State 90

   59 callsuffix: methodcall .

    $default  reduce using rule 59 (callsuffix)


State 91

   54 member: call MY_OPEN_BRA . expr MY_CLOSE_BRA

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 130
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 92

   55 call: call MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 63 (elist)

    expr        go to state 95
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 131
    objectdef   go to state 35
    const       go to state 38


State 93

   53 member: call MY_DOT_SIMPLE . MY_ID

    MY_ID  shift, and go to state 132


State 94

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr
   94 ifstmt: MY_IF MY_OPEN_PAR expr . MY_CLOSE_PAR stmt
   95       | MY_IF MY_OPEN_PAR expr . MY_CLOSE_PAR stmt MY_ELSE stmt

    MY_AND        shift, and go to state 67
    MY_OR         shift, and go to state 68
    MY_EQUAL      shift, and go to state 69
    MY_NEQUAL     shift, and go to state 70
    MY_PLUS       shift, and go to state 71
    MY_MINUS      shift, and go to state 72
    MY_MUL        shift, and go to state 73
    MY_DIV        shift, and go to state 74
    MY_MOD        shift, and go to state 75
    MY_L          shift, and go to state 76
    MY_LE         shift, and go to state 77
    MY_G          shift, and go to state 78
    MY_GE         shift, and go to state 79
    MY_CLOSE_PAR  shift, and go to state 133


State 95

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr
   62 elist: expr . commaexprs

    MY_AND     shift, and go to state 67
    MY_OR      shift, and go to state 68
    MY_EQUAL   shift, and go to state 69
    MY_NEQUAL  shift, and go to state 70
    MY_PLUS    shift, and go to state 71
    MY_MINUS   shift, and go to state 72
    MY_MUL     shift, and go to state 73
    MY_DIV     shift, and go to state 74
    MY_MOD     shift, and go to state 75
    MY_L       shift, and go to state 76
    MY_LE      shift, and go to state 77
    MY_G       shift, and go to state 78
    MY_GE      shift, and go to state 79
    MY_COMMA   shift, and go to state 134

    $default  reduce using rule 65 (commaexprs)

    commaexprs  go to state 135


State 96

   97 forstmt: MY_FOR MY_OPEN_PAR elist . MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_SEMICOLON  shift, and go to state 136


State 97

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr
   96 whilestmt: MY_WHILE MY_OPEN_PAR expr . MY_CLOSE_PAR stmt

    MY_AND        shift, and go to state 67
    MY_OR         shift, and go to state 68
    MY_EQUAL      shift, and go to state 69
    MY_NEQUAL     shift, and go to state 70
    MY_PLUS       shift, and go to state 71
    MY_MINUS      shift, and go to state 72
    MY_MUL        shift, and go to state 73
    MY_DIV        shift, and go to state 74
    MY_MOD        shift, and go to state 75
    MY_L          shift, and go to state 76
    MY_LE         shift, and go to state 77
    MY_G          shift, and go to state 78
    MY_GE         shift, and go to state 79
    MY_CLOSE_PAR  shift, and go to state 137


State 98

   99 returnstmt: MY_RETURN expr MY_SEMICOLON .

    $default  reduce using rule 99 (returnstmt)


State 99

   81 funcdef: MY_FUNCTION MY_ID $@10 . MY_OPEN_PAR idlist MY_CLOSE_PAR funblock

    MY_OPEN_PAR  shift, and go to state 138


State 100

   79 funcdef: MY_FUNCTION $@9 MY_OPEN_PAR . idlist MY_CLOSE_PAR funblock

    MY_ID  shift, and go to state 139

    $default  reduce using rule 90 (idlist)

    idlist  go to state 140


State 101

   57 call: MY_OPEN_PAR funcdef . MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 141


State 102

   75 block: MY_OPEN_ANG $@7 stmts . MY_CLOSE_ANG

    MY_CLOSE_ANG  shift, and go to state 142


State 103

   67 objectdef: MY_OPEN_BRA $@5 elist . MY_CLOSE_BRA

    MY_CLOSE_BRA  shift, and go to state 143


State 104

   73 indexedelem: MY_OPEN_ANG . expr MY_DOT_UD expr MY_CLOSE_ANG

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 144
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 105

   69 objectdef: MY_OPEN_BRA $@6 indexed . MY_CLOSE_BRA

    MY_CLOSE_BRA  shift, and go to state 145


State 106

   70 indexed: indexedelem . commaindex

    MY_COMMA  shift, and go to state 146

    $default  reduce using rule 72 (commaindex)

    commaindex  go to state 147


State 107

   30 term: MY_OPEN_PAR expr MY_CLOSE_PAR .

    $default  reduce using rule 30 (term)


State 108

   45 primary: MY_OPEN_PAR funcdef MY_CLOSE_PAR .
   57 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_PAR  shift, and go to state 148

    $default  reduce using rule 45 (primary)


State 109

    3 stmts: stmt $@1 stmts .

    $default  reduce using rule 3 (stmts)


State 110

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   27     | expr MY_AND expr .
   28     | expr . MY_OR expr

    MY_EQUAL   shift, and go to state 69
    MY_NEQUAL  shift, and go to state 70
    MY_PLUS    shift, and go to state 71
    MY_MINUS   shift, and go to state 72
    MY_MUL     shift, and go to state 73
    MY_DIV     shift, and go to state 74
    MY_MOD     shift, and go to state 75
    MY_L       shift, and go to state 76
    MY_LE      shift, and go to state 77
    MY_G       shift, and go to state 78
    MY_GE      shift, and go to state 79

    $default  reduce using rule 27 (expr)


State 111

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr
   28     | expr MY_OR expr .

    MY_EQUAL   shift, and go to state 69
    MY_NEQUAL  shift, and go to state 70
    MY_PLUS    shift, and go to state 71
    MY_MINUS   shift, and go to state 72
    MY_MUL     shift, and go to state 73
    MY_DIV     shift, and go to state 74
    MY_MOD     shift, and go to state 75
    MY_L       shift, and go to state 76
    MY_LE      shift, and go to state 77
    MY_G       shift, and go to state 78
    MY_GE      shift, and go to state 79

    $default  reduce using rule 28 (expr)


State 112

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   25     | expr MY_EQUAL expr .
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr

    MY_PLUS   shift, and go to state 71
    MY_MINUS  shift, and go to state 72
    MY_MUL    shift, and go to state 73
    MY_DIV    shift, and go to state 74
    MY_MOD    shift, and go to state 75
    MY_L      shift, and go to state 76
    MY_LE     shift, and go to state 77
    MY_G      shift, and go to state 78
    MY_GE     shift, and go to state 79

    MY_EQUAL   error (nonassociative)
    MY_NEQUAL  error (nonassociative)

    $default  reduce using rule 25 (expr)


State 113

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   26     | expr MY_NEQUAL expr .
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr

    MY_PLUS   shift, and go to state 71
    MY_MINUS  shift, and go to state 72
    MY_MUL    shift, and go to state 73
    MY_DIV    shift, and go to state 74
    MY_MOD    shift, and go to state 75
    MY_L      shift, and go to state 76
    MY_LE     shift, and go to state 77
    MY_G      shift, and go to state 78
    MY_GE     shift, and go to state 79

    MY_EQUAL   error (nonassociative)
    MY_NEQUAL  error (nonassociative)

    $default  reduce using rule 26 (expr)


State 114

   16 expr: expr . MY_PLUS expr
   16     | expr MY_PLUS expr .
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr

    MY_MUL  shift, and go to state 73
    MY_DIV  shift, and go to state 74
    MY_MOD  shift, and go to state 75

    $default  reduce using rule 16 (expr)


State 115

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   17     | expr MY_MINUS expr .
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr

    MY_MUL  shift, and go to state 73
    MY_DIV  shift, and go to state 74
    MY_MOD  shift, and go to state 75

    $default  reduce using rule 17 (expr)


State 116

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   18     | expr MY_MUL expr .
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr

    $default  reduce using rule 18 (expr)


State 117

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   19     | expr MY_DIV expr .
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr

    $default  reduce using rule 19 (expr)


State 118

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   20     | expr MY_MOD expr .
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr

    $default  reduce using rule 20 (expr)


State 119

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   23     | expr MY_L expr .
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr

    MY_PLUS   shift, and go to state 71
    MY_MINUS  shift, and go to state 72
    MY_MUL    shift, and go to state 73
    MY_DIV    shift, and go to state 74
    MY_MOD    shift, and go to state 75

    MY_L   error (nonassociative)
    MY_LE  error (nonassociative)
    MY_G   error (nonassociative)
    MY_GE  error (nonassociative)

    $default  reduce using rule 23 (expr)


State 120

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   24     | expr MY_LE expr .
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr

    MY_PLUS   shift, and go to state 71
    MY_MINUS  shift, and go to state 72
    MY_MUL    shift, and go to state 73
    MY_DIV    shift, and go to state 74
    MY_MOD    shift, and go to state 75

    MY_L   error (nonassociative)
    MY_LE  error (nonassociative)
    MY_G   error (nonassociative)
    MY_GE  error (nonassociative)

    $default  reduce using rule 24 (expr)


State 121

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   21     | expr MY_G expr .
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr

    MY_PLUS   shift, and go to state 71
    MY_MINUS  shift, and go to state 72
    MY_MUL    shift, and go to state 73
    MY_DIV    shift, and go to state 74
    MY_MOD    shift, and go to state 75

    MY_L   error (nonassociative)
    MY_LE  error (nonassociative)
    MY_G   error (nonassociative)
    MY_GE  error (nonassociative)

    $default  reduce using rule 21 (expr)


State 122

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   22     | expr MY_GE expr .
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr

    MY_PLUS   shift, and go to state 71
    MY_MINUS  shift, and go to state 72
    MY_MUL    shift, and go to state 73
    MY_DIV    shift, and go to state 74
    MY_MOD    shift, and go to state 75

    MY_L   error (nonassociative)
    MY_LE  error (nonassociative)
    MY_G   error (nonassociative)
    MY_GE  error (nonassociative)

    $default  reduce using rule 22 (expr)


State 123

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr
   52 member: lvalue MY_OPEN_BRA expr . MY_CLOSE_BRA

    MY_AND        shift, and go to state 67
    MY_OR         shift, and go to state 68
    MY_EQUAL      shift, and go to state 69
    MY_NEQUAL     shift, and go to state 70
    MY_PLUS       shift, and go to state 71
    MY_MINUS      shift, and go to state 72
    MY_MUL        shift, and go to state 73
    MY_DIV        shift, and go to state 74
    MY_MOD        shift, and go to state 75
    MY_L          shift, and go to state 76
    MY_LE         shift, and go to state 77
    MY_G          shift, and go to state 78
    MY_GE         shift, and go to state 79
    MY_CLOSE_BRA  shift, and go to state 149


State 124

   60 normcall: MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 150


State 125

   51 member: lvalue MY_DOT_SIMPLE MY_ID .

    $default  reduce using rule 51 (member)


State 126

   61 methodcall: MY_DOT_DOUBLE MY_ID . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_PAR  shift, and go to state 151


State 127

   35 term: lvalue $@2 MY_INC .

    $default  reduce using rule 35 (term)


State 128

   38 term: lvalue $@3 MY_DEC .

    $default  reduce using rule 38 (term)


State 129

   41 assignexpr: lvalue $@4 MY_ASSIGN . expr

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 152
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 130

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr
   54 member: call MY_OPEN_BRA expr . MY_CLOSE_BRA

    MY_AND        shift, and go to state 67
    MY_OR         shift, and go to state 68
    MY_EQUAL      shift, and go to state 69
    MY_NEQUAL     shift, and go to state 70
    MY_PLUS       shift, and go to state 71
    MY_MINUS      shift, and go to state 72
    MY_MUL        shift, and go to state 73
    MY_DIV        shift, and go to state 74
    MY_MOD        shift, and go to state 75
    MY_L          shift, and go to state 76
    MY_LE         shift, and go to state 77
    MY_G          shift, and go to state 78
    MY_GE         shift, and go to state 79
    MY_CLOSE_BRA  shift, and go to state 153


State 131

   55 call: call MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 154


State 132

   53 member: call MY_DOT_SIMPLE MY_ID .

    $default  reduce using rule 53 (member)


State 133

   94 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR . stmt
   95       | MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR . stmt MY_ELSE stmt

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_IF          shift, and go to state 4
    MY_FOR         shift, and go to state 5
    MY_WHILE       shift, and go to state 6
    MY_CONTINUE    shift, and go to state 7
    MY_BREAK       shift, and go to state 8
    MY_RETURN      shift, and go to state 9
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_FUNCTION    shift, and go to state 15
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 155
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 134

   64 commaexprs: MY_COMMA . expr commaexprs

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 156
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 135

   62 elist: expr commaexprs .

    $default  reduce using rule 62 (elist)


State 136

   97 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON . expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 157
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 137

   96 whilestmt: MY_WHILE MY_OPEN_PAR expr MY_CLOSE_PAR . stmt

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_IF          shift, and go to state 4
    MY_FOR         shift, and go to state 5
    MY_WHILE       shift, and go to state 6
    MY_CONTINUE    shift, and go to state 7
    MY_BREAK       shift, and go to state 8
    MY_RETURN      shift, and go to state 9
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_FUNCTION    shift, and go to state 15
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 158
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 138

   81 funcdef: MY_FUNCTION MY_ID $@10 MY_OPEN_PAR . idlist MY_CLOSE_PAR funblock

    MY_ID  shift, and go to state 139

    $default  reduce using rule 90 (idlist)

    idlist  go to state 159


State 139

   89 idlist: MY_ID . $@11 idwithcommas

    $default  reduce using rule 88 ($@11)

    $@11  go to state 160


State 140

   79 funcdef: MY_FUNCTION $@9 MY_OPEN_PAR idlist . MY_CLOSE_PAR funblock

    MY_CLOSE_PAR  shift, and go to state 161


State 141

   57 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_PAR  shift, and go to state 148


State 142

   75 block: MY_OPEN_ANG $@7 stmts MY_CLOSE_ANG .

    $default  reduce using rule 75 (block)


State 143

   67 objectdef: MY_OPEN_BRA $@5 elist MY_CLOSE_BRA .

    $default  reduce using rule 67 (objectdef)


State 144

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr
   73 indexedelem: MY_OPEN_ANG expr . MY_DOT_UD expr MY_CLOSE_ANG

    MY_AND     shift, and go to state 67
    MY_OR      shift, and go to state 68
    MY_EQUAL   shift, and go to state 69
    MY_NEQUAL  shift, and go to state 70
    MY_PLUS    shift, and go to state 71
    MY_MINUS   shift, and go to state 72
    MY_MUL     shift, and go to state 73
    MY_DIV     shift, and go to state 74
    MY_MOD     shift, and go to state 75
    MY_L       shift, and go to state 76
    MY_LE      shift, and go to state 77
    MY_G       shift, and go to state 78
    MY_GE      shift, and go to state 79
    MY_DOT_UD  shift, and go to state 162


State 145

   69 objectdef: MY_OPEN_BRA $@6 indexed MY_CLOSE_BRA .

    $default  reduce using rule 69 (objectdef)


State 146

   71 commaindex: MY_COMMA . indexedelem commaindex

    MY_OPEN_ANG  shift, and go to state 104

    indexedelem  go to state 163


State 147

   70 indexed: indexedelem commaindex .

    $default  reduce using rule 70 (indexed)


State 148

   57 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 63 (elist)

    expr        go to state 95
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 164
    objectdef   go to state 35
    const       go to state 38


State 149

   52 member: lvalue MY_OPEN_BRA expr MY_CLOSE_BRA .

    $default  reduce using rule 52 (member)


State 150

   60 normcall: MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 60 (normcall)


State 151

   61 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 63 (elist)

    expr        go to state 95
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 165
    objectdef   go to state 35
    const       go to state 38


State 152

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr
   41 assignexpr: lvalue $@4 MY_ASSIGN expr .

    MY_AND     shift, and go to state 67
    MY_OR      shift, and go to state 68
    MY_EQUAL   shift, and go to state 69
    MY_NEQUAL  shift, and go to state 70
    MY_PLUS    shift, and go to state 71
    MY_MINUS   shift, and go to state 72
    MY_MUL     shift, and go to state 73
    MY_DIV     shift, and go to state 74
    MY_MOD     shift, and go to state 75
    MY_L       shift, and go to state 76
    MY_LE      shift, and go to state 77
    MY_G       shift, and go to state 78
    MY_GE      shift, and go to state 79

    $default  reduce using rule 41 (assignexpr)


State 153

   54 member: call MY_OPEN_BRA expr MY_CLOSE_BRA .

    $default  reduce using rule 54 (member)


State 154

   55 call: call MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 55 (call)


State 155

   94 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt .
   95       | MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt . MY_ELSE stmt

    MY_ELSE  shift, and go to state 166

    MY_ELSE   [reduce using rule 94 (ifstmt)]
    $default  reduce using rule 94 (ifstmt)


State 156

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr
   64 commaexprs: MY_COMMA expr . commaexprs

    MY_AND     shift, and go to state 67
    MY_OR      shift, and go to state 68
    MY_EQUAL   shift, and go to state 69
    MY_NEQUAL  shift, and go to state 70
    MY_PLUS    shift, and go to state 71
    MY_MINUS   shift, and go to state 72
    MY_MUL     shift, and go to state 73
    MY_DIV     shift, and go to state 74
    MY_MOD     shift, and go to state 75
    MY_L       shift, and go to state 76
    MY_LE      shift, and go to state 77
    MY_G       shift, and go to state 78
    MY_GE      shift, and go to state 79
    MY_COMMA   shift, and go to state 134

    $default  reduce using rule 65 (commaexprs)

    commaexprs  go to state 167


State 157

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr
   97 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr . MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_AND        shift, and go to state 67
    MY_OR         shift, and go to state 68
    MY_EQUAL      shift, and go to state 69
    MY_NEQUAL     shift, and go to state 70
    MY_PLUS       shift, and go to state 71
    MY_MINUS      shift, and go to state 72
    MY_MUL        shift, and go to state 73
    MY_DIV        shift, and go to state 74
    MY_MOD        shift, and go to state 75
    MY_L          shift, and go to state 76
    MY_LE         shift, and go to state 77
    MY_G          shift, and go to state 78
    MY_GE         shift, and go to state 79
    MY_SEMICOLON  shift, and go to state 168


State 158

   96 whilestmt: MY_WHILE MY_OPEN_PAR expr MY_CLOSE_PAR stmt .

    $default  reduce using rule 96 (whilestmt)


State 159

   81 funcdef: MY_FUNCTION MY_ID $@10 MY_OPEN_PAR idlist . MY_CLOSE_PAR funblock

    MY_CLOSE_PAR  shift, and go to state 169


State 160

   89 idlist: MY_ID $@11 . idwithcommas

    MY_COMMA  shift, and go to state 170

    $default  reduce using rule 93 (idwithcommas)

    idwithcommas  go to state 171


State 161

   79 funcdef: MY_FUNCTION $@9 MY_OPEN_PAR idlist MY_CLOSE_PAR . funblock

    MY_OPEN_ANG  shift, and go to state 172

    funblock  go to state 173


State 162

   73 indexedelem: MY_OPEN_ANG expr MY_DOT_UD . expr MY_CLOSE_ANG

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 174
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 163

   71 commaindex: MY_COMMA indexedelem . commaindex

    MY_COMMA  shift, and go to state 146

    $default  reduce using rule 72 (commaindex)

    commaindex  go to state 175


State 164

   57 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 176


State 165

   61 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 177


State 166

   95 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE . stmt

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_IF          shift, and go to state 4
    MY_FOR         shift, and go to state 5
    MY_WHILE       shift, and go to state 6
    MY_CONTINUE    shift, and go to state 7
    MY_BREAK       shift, and go to state 8
    MY_RETURN      shift, and go to state 9
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_FUNCTION    shift, and go to state 15
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 178
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 167

   64 commaexprs: MY_COMMA expr commaexprs .

    $default  reduce using rule 64 (commaexprs)


State 168

   97 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON . elist MY_CLOSE_PAR stmt

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 63 (elist)

    expr        go to state 95
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 179
    objectdef   go to state 35
    const       go to state 38


State 169

   81 funcdef: MY_FUNCTION MY_ID $@10 MY_OPEN_PAR idlist MY_CLOSE_PAR . funblock

    MY_OPEN_ANG  shift, and go to state 172

    funblock  go to state 180


State 170

   92 idwithcommas: MY_COMMA . MY_ID $@12 idwithcommas

    MY_ID  shift, and go to state 181


State 171

   89 idlist: MY_ID $@11 idwithcommas .

    $default  reduce using rule 89 (idlist)


State 172

   77 funblock: MY_OPEN_ANG . $@8 stmts MY_CLOSE_ANG

    $default  reduce using rule 76 ($@8)

    $@8  go to state 182


State 173

   79 funcdef: MY_FUNCTION $@9 MY_OPEN_PAR idlist MY_CLOSE_PAR funblock .

    $default  reduce using rule 79 (funcdef)


State 174

   16 expr: expr . MY_PLUS expr
   17     | expr . MY_MINUS expr
   18     | expr . MY_MUL expr
   19     | expr . MY_DIV expr
   20     | expr . MY_MOD expr
   21     | expr . MY_G expr
   22     | expr . MY_GE expr
   23     | expr . MY_L expr
   24     | expr . MY_LE expr
   25     | expr . MY_EQUAL expr
   26     | expr . MY_NEQUAL expr
   27     | expr . MY_AND expr
   28     | expr . MY_OR expr
   73 indexedelem: MY_OPEN_ANG expr MY_DOT_UD expr . MY_CLOSE_ANG

    MY_AND        shift, and go to state 67
    MY_OR         shift, and go to state 68
    MY_EQUAL      shift, and go to state 69
    MY_NEQUAL     shift, and go to state 70
    MY_PLUS       shift, and go to state 71
    MY_MINUS      shift, and go to state 72
    MY_MUL        shift, and go to state 73
    MY_DIV        shift, and go to state 74
    MY_MOD        shift, and go to state 75
    MY_L          shift, and go to state 76
    MY_LE         shift, and go to state 77
    MY_G          shift, and go to state 78
    MY_GE         shift, and go to state 79
    MY_CLOSE_ANG  shift, and go to state 183


State 175

   71 commaindex: MY_COMMA indexedelem commaindex .

    $default  reduce using rule 71 (commaindex)


State 176

   57 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 57 (call)


State 177

   61 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 61 (methodcall)


State 178

   95 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE stmt .

    $default  reduce using rule 95 (ifstmt)


State 179

   97 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist . MY_CLOSE_PAR stmt

    MY_CLOSE_PAR  shift, and go to state 184


State 180

   81 funcdef: MY_FUNCTION MY_ID $@10 MY_OPEN_PAR idlist MY_CLOSE_PAR funblock .

    $default  reduce using rule 81 (funcdef)


State 181

   92 idwithcommas: MY_COMMA MY_ID . $@12 idwithcommas

    $default  reduce using rule 91 ($@12)

    $@12  go to state 185


State 182

   77 funblock: MY_OPEN_ANG $@8 . stmts MY_CLOSE_ANG

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_IF          shift, and go to state 4
    MY_FOR         shift, and go to state 5
    MY_WHILE       shift, and go to state 6
    MY_CONTINUE    shift, and go to state 7
    MY_BREAK       shift, and go to state 8
    MY_RETURN      shift, and go to state 9
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_FUNCTION    shift, and go to state 15
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    $default  reduce using rule 4 (stmts)

    stmts       go to state 186
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 183

   73 indexedelem: MY_OPEN_ANG expr MY_DOT_UD expr MY_CLOSE_ANG .

    $default  reduce using rule 73 (indexedelem)


State 184

   97 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR . stmt

    MY_INTEGER     shift, and go to state 1
    MY_REAL        shift, and go to state 2
    MY_STRING      shift, and go to state 3
    MY_IF          shift, and go to state 4
    MY_FOR         shift, and go to state 5
    MY_WHILE       shift, and go to state 6
    MY_CONTINUE    shift, and go to state 7
    MY_BREAK       shift, and go to state 8
    MY_RETURN      shift, and go to state 9
    MY_NOT         shift, and go to state 10
    MY_LOCAL       shift, and go to state 11
    MY_NIL         shift, and go to state 12
    MY_TRUE        shift, and go to state 13
    MY_FALSE       shift, and go to state 14
    MY_FUNCTION    shift, and go to state 15
    MY_ID          shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 187
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 185

   92 idwithcommas: MY_COMMA MY_ID $@12 . idwithcommas

    MY_COMMA  shift, and go to state 170

    $default  reduce using rule 93 (idwithcommas)

    idwithcommas  go to state 188


State 186

   77 funblock: MY_OPEN_ANG $@8 stmts . MY_CLOSE_ANG

    MY_CLOSE_ANG  shift, and go to state 189


State 187

   97 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt .

    $default  reduce using rule 97 (forstmt)


State 188

   92 idwithcommas: MY_COMMA MY_ID $@12 idwithcommas .

    $default  reduce using rule 92 (idwithcommas)


State 189

   77 funblock: MY_OPEN_ANG $@8 stmts MY_CLOSE_ANG .

    $default  reduce using rule 77 (funblock)
