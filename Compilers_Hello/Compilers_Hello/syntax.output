Terminals unused in grammar

   MY_MULTILINE_COMMENTS
   MY_SIMPLE_COMMENTS
   MY_DO
   MY_GLOBAL
   MY_STATIC
   MY_BLANK
   MY_NL
   MY_OTHER


State 116 conflicts: 13 shift/reduce
State 142 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmts: stmt stmts
    3      | %empty

    4 stmt: expr MY_SEMICOLON
    5     | ifstmt
    6     | whilestmt
    7     | forstmt
    8     | returnstmt
    9     | MY_BREAK MY_SEMICOLON
   10     | MY_CONTINUE MY_SEMICOLON
   11     | block
   12     | funcdef
   13     | MY_SEMICOLON

   14 expr: assignexpr
   15     | expr operator expr
   16     | term

   17 operator: MY_PLUS
   18         | MY_MINUS
   19         | MY_MUL
   20         | MY_DIV
   21         | MY_MOD
   22         | MY_G
   23         | MY_GE
   24         | MY_L
   25         | MY_LE
   26         | MY_EQUAL
   27         | MY_NEQUAL
   28         | MY_AND
   29         | MY_OR

   30 term: MY_OPEN_PAR expr MY_CLOSE_PAR
   31     | MY_MINUS expr
   32     | MY_NOT expr
   33     | MY_INC lvalue
   34     | lvalue MY_INC
   35     | MY_DEC lvalue
   36     | lvalue MY_DEC
   37     | primary

   38 assignexpr: lvalue MY_ASSIGN expr

   39 primary: lvalue
   40        | call
   41        | objectdef
   42        | MY_OPEN_PAR funcdef MY_CLOSE_PAR
   43        | const

   44 lvalue: MY_ID
   45       | MY_LOCAL MY_ID
   46       | MY_DOT_STREAM MY_ID
   47       | member

   48 member: lvalue MY_DOT_SIMPLE MY_ID
   49       | lvalue MY_OPEN_BRA expr MY_CLOSE_BRA
   50       | call MY_DOT_SIMPLE MY_ID
   51       | call MY_OPEN_BRA expr MY_CLOSE_BRA

   52 call: call MY_OPEN_PAR elist MY_CLOSE_PAR
   53     | lvalue callsuffix
   54     | MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

   55 callsuffix: normcall
   56           | methodcall

   57 normcall: MY_OPEN_PAR elist MY_CLOSE_PAR

   58 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR elist MY_CLOSE_PAR

   59 elist: expr commaexprs
   60      | %empty

   61 commaexprs: MY_COMMA expr commaexprs
   62           | %empty

   63 objectdef: MY_OPEN_BRA elist MY_CLOSE_BRA
   64          | MY_OPEN_BRA indexed MY_CLOSE_BRA

   65 indexed: indexedelem commaindex

   66 commaindex: MY_COMMA indexedelem commaindex
   67           | %empty

   68 indexedelem: MY_OPEN_ANG expr MY_DOT_UD expr MY_CLOSE_ANG

   69 block: MY_OPEN_ANG stmts MY_CLOSE_ANG

   70 funcdef: MY_FUNCTION MY_OPEN_PAR idlist MY_CLOSE_PAR block
   71        | MY_FUNCTION MY_ID MY_OPEN_PAR idlist MY_CLOSE_PAR block

   72 const: MY_REAL
   73      | MY_INTEGER
   74      | MY_STRING
   75      | MY_NIL
   76      | MY_TRUE
   77      | MY_FALSE

   78 idlist: MY_ID idwithcommas
   79       | %empty

   80 idwithcommas: MY_COMMA MY_ID idwithcommas
   81             | %empty

   82 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt
   83       | MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE stmt

   84 whilestmt: MY_WHILE MY_OPEN_PAR expr MY_CLOSE_PAR stmt

   85 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

   86 returnstmt: MY_RETURN MY_SEMICOLON
   87           | MY_RETURN expr MY_SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
MY_MULTILINE_COMMENTS (258)
MY_SIMPLE_COMMENTS (259)
MY_STRING (260) 74
MY_IF (261) 82 83
MY_ELSE (262) 83
MY_FOR (263) 85
MY_WHILE (264) 84
MY_DO (265)
MY_CONTINUE (266) 10
MY_BREAK (267) 9
MY_RETURN (268) 86 87
MY_AND (269) 28
MY_OR (270) 29
MY_NOT (271) 32
MY_LOCAL (272) 45
MY_GLOBAL (273)
MY_STATIC (274)
MY_NIL (275) 75
MY_TRUE (276) 76
MY_FALSE (277) 77
MY_FUNCTION (278) 70 71
MY_ID (279) 44 45 46 48 50 58 71 78 80
MY_BLANK (280)
MY_NL (281)
MY_INTEGER (282) 73
MY_REAL (283) 72
MY_ASSIGN (284) 38
MY_EQUAL (285) 26
MY_NEQUAL (286) 27
MY_PLUS (287) 17
MY_INC (288) 33 34
MY_MINUS (289) 18 31
MY_DEC (290) 35 36
MY_MUL (291) 19
MY_DIV (292) 20
MY_MOD (293) 21
MY_L (294) 24
MY_LE (295) 25
MY_G (296) 22
MY_GE (297) 23
MY_OPEN_ANG (298) 68 69
MY_OPEN_BRA (299) 49 51 63 64
MY_OPEN_PAR (300) 30 42 52 54 57 58 70 71 82 83 84 85
MY_CLOSE_ANG (301) 68 69
MY_CLOSE_BRA (302) 49 51 63 64
MY_CLOSE_PAR (303) 30 42 52 54 57 58 70 71 82 83 84 85
MY_DOT_UD (304) 68
MY_DOT_STREAM (305) 46
MY_DOT_SIMPLE (306) 48 50
MY_DOT_DOUBLE (307) 58
MY_COMMA (308) 61 66 80
MY_SEMICOLON (309) 4 9 10 13 85 86 87
MY_OTHER (310)
UNARY_MINUS (311)


Nonterminals, with rules where they appear

$accept (57)
    on left: 0
program (58)
    on left: 1, on right: 0
stmts (59)
    on left: 2 3, on right: 1 2 69
stmt (60)
    on left: 4 5 6 7 8 9 10 11 12 13, on right: 2 82 83 84 85
expr (61)
    on left: 14 15 16, on right: 4 15 30 31 32 38 49 51 59 61 68 82
    83 84 85 87
operator (62)
    on left: 17 18 19 20 21 22 23 24 25 26 27 28 29, on right: 15
term (63)
    on left: 30 31 32 33 34 35 36 37, on right: 16
assignexpr (64)
    on left: 38, on right: 14
primary (65)
    on left: 39 40 41 42 43, on right: 37
lvalue (66)
    on left: 44 45 46 47, on right: 33 34 35 36 38 39 48 49 53
member (67)
    on left: 48 49 50 51, on right: 47
call (68)
    on left: 52 53 54, on right: 40 50 51 52
callsuffix (69)
    on left: 55 56, on right: 53
normcall (70)
    on left: 57, on right: 55
methodcall (71)
    on left: 58, on right: 56
elist (72)
    on left: 59 60, on right: 52 54 57 58 63 85
commaexprs (73)
    on left: 61 62, on right: 59 61
objectdef (74)
    on left: 63 64, on right: 41
indexed (75)
    on left: 65, on right: 64
commaindex (76)
    on left: 66 67, on right: 65 66
indexedelem (77)
    on left: 68, on right: 65 66
block (78)
    on left: 69, on right: 11 70 71
funcdef (79)
    on left: 70 71, on right: 12 42 54
const (80)
    on left: 72 73 74 75 76 77, on right: 43
idlist (81)
    on left: 78 79, on right: 70 71
idwithcommas (82)
    on left: 80 81, on right: 78 80
ifstmt (83)
    on left: 82 83, on right: 5
whilestmt (84)
    on left: 84, on right: 6
forstmt (85)
    on left: 85, on right: 7
returnstmt (86)
    on left: 86 87, on right: 8


State 0

    0 $accept: . program $end

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    $default  reduce using rule 3 (stmts)

    program     go to state 25
    stmts       go to state 26
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 1

   74 const: MY_STRING .

    $default  reduce using rule 74 (const)


State 2

   82 ifstmt: MY_IF . MY_OPEN_PAR expr MY_CLOSE_PAR stmt
   83       | MY_IF . MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE stmt

    MY_OPEN_PAR  shift, and go to state 43


State 3

   85 forstmt: MY_FOR . MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_OPEN_PAR  shift, and go to state 44


State 4

   84 whilestmt: MY_WHILE . MY_OPEN_PAR expr MY_CLOSE_PAR stmt

    MY_OPEN_PAR  shift, and go to state 45


State 5

   10 stmt: MY_CONTINUE . MY_SEMICOLON

    MY_SEMICOLON  shift, and go to state 46


State 6

    9 stmt: MY_BREAK . MY_SEMICOLON

    MY_SEMICOLON  shift, and go to state 47


State 7

   86 returnstmt: MY_RETURN . MY_SEMICOLON
   87           | MY_RETURN . expr MY_SEMICOLON

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 48

    expr        go to state 49
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 8

   32 term: MY_NOT . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 50
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 9

   45 lvalue: MY_LOCAL . MY_ID

    MY_ID  shift, and go to state 51


State 10

   75 const: MY_NIL .

    $default  reduce using rule 75 (const)


State 11

   76 const: MY_TRUE .

    $default  reduce using rule 76 (const)


State 12

   77 const: MY_FALSE .

    $default  reduce using rule 77 (const)


State 13

   70 funcdef: MY_FUNCTION . MY_OPEN_PAR idlist MY_CLOSE_PAR block
   71        | MY_FUNCTION . MY_ID MY_OPEN_PAR idlist MY_CLOSE_PAR block

    MY_ID        shift, and go to state 52
    MY_OPEN_PAR  shift, and go to state 53


State 14

   44 lvalue: MY_ID .

    $default  reduce using rule 44 (lvalue)


State 15

   73 const: MY_INTEGER .

    $default  reduce using rule 73 (const)


State 16

   72 const: MY_REAL .

    $default  reduce using rule 72 (const)


State 17

   33 term: MY_INC . lvalue

    MY_LOCAL       shift, and go to state 9
    MY_ID          shift, and go to state 14
    MY_OPEN_PAR    shift, and go to state 54
    MY_DOT_STREAM  shift, and go to state 23

    lvalue  go to state 55
    member  go to state 33
    call    go to state 56


State 18

   31 term: MY_MINUS . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 57
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 19

   35 term: MY_DEC . lvalue

    MY_LOCAL       shift, and go to state 9
    MY_ID          shift, and go to state 14
    MY_OPEN_PAR    shift, and go to state 54
    MY_DOT_STREAM  shift, and go to state 23

    lvalue  go to state 58
    member  go to state 33
    call    go to state 56


State 20

   69 block: MY_OPEN_ANG . stmts MY_CLOSE_ANG

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    $default  reduce using rule 3 (stmts)

    stmts       go to state 59
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 21

   63 objectdef: MY_OPEN_BRA . elist MY_CLOSE_BRA
   64          | MY_OPEN_BRA . indexed MY_CLOSE_BRA

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 60
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 60 (elist)

    expr         go to state 61
    term         go to state 29
    assignexpr   go to state 30
    primary      go to state 31
    lvalue       go to state 32
    member       go to state 33
    call         go to state 34
    elist        go to state 62
    objectdef    go to state 35
    indexed      go to state 63
    indexedelem  go to state 64
    const        go to state 38


State 22

   30 term: MY_OPEN_PAR . expr MY_CLOSE_PAR
   42 primary: MY_OPEN_PAR . funcdef MY_CLOSE_PAR
   54 call: MY_OPEN_PAR . funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 65
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    funcdef     go to state 66
    const       go to state 38


State 23

   46 lvalue: MY_DOT_STREAM . MY_ID

    MY_ID  shift, and go to state 67


State 24

   13 stmt: MY_SEMICOLON .

    $default  reduce using rule 13 (stmt)


State 25

    0 $accept: program . $end

    $end  shift, and go to state 68


State 26

    1 program: stmts .

    $default  reduce using rule 1 (program)


State 27

    2 stmts: stmt . stmts

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    $default  reduce using rule 3 (stmts)

    stmts       go to state 69
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 28

    4 stmt: expr . MY_SEMICOLON
   15 expr: expr . operator expr

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_SEMICOLON  shift, and go to state 83

    operator  go to state 84


State 29

   16 expr: term .

    $default  reduce using rule 16 (expr)


State 30

   14 expr: assignexpr .

    $default  reduce using rule 14 (expr)


State 31

   37 term: primary .

    $default  reduce using rule 37 (term)


State 32

   34 term: lvalue . MY_INC
   36     | lvalue . MY_DEC
   38 assignexpr: lvalue . MY_ASSIGN expr
   39 primary: lvalue .
   48 member: lvalue . MY_DOT_SIMPLE MY_ID
   49       | lvalue . MY_OPEN_BRA expr MY_CLOSE_BRA
   53 call: lvalue . callsuffix

    MY_ASSIGN      shift, and go to state 85
    MY_INC         shift, and go to state 86
    MY_DEC         shift, and go to state 87
    MY_OPEN_BRA    shift, and go to state 88
    MY_OPEN_PAR    shift, and go to state 89
    MY_DOT_SIMPLE  shift, and go to state 90
    MY_DOT_DOUBLE  shift, and go to state 91

    $default  reduce using rule 39 (primary)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 33

   47 lvalue: member .

    $default  reduce using rule 47 (lvalue)


State 34

   40 primary: call .
   50 member: call . MY_DOT_SIMPLE MY_ID
   51       | call . MY_OPEN_BRA expr MY_CLOSE_BRA
   52 call: call . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_BRA    shift, and go to state 95
    MY_OPEN_PAR    shift, and go to state 96
    MY_DOT_SIMPLE  shift, and go to state 97

    $default  reduce using rule 40 (primary)


State 35

   41 primary: objectdef .

    $default  reduce using rule 41 (primary)


State 36

   11 stmt: block .

    $default  reduce using rule 11 (stmt)


State 37

   12 stmt: funcdef .

    $default  reduce using rule 12 (stmt)


State 38

   43 primary: const .

    $default  reduce using rule 43 (primary)


State 39

    5 stmt: ifstmt .

    $default  reduce using rule 5 (stmt)


State 40

    6 stmt: whilestmt .

    $default  reduce using rule 6 (stmt)


State 41

    7 stmt: forstmt .

    $default  reduce using rule 7 (stmt)


State 42

    8 stmt: returnstmt .

    $default  reduce using rule 8 (stmt)


State 43

   82 ifstmt: MY_IF MY_OPEN_PAR . expr MY_CLOSE_PAR stmt
   83       | MY_IF MY_OPEN_PAR . expr MY_CLOSE_PAR stmt MY_ELSE stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 98
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 44

   85 forstmt: MY_FOR MY_OPEN_PAR . elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 60 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 99
    objectdef   go to state 35
    const       go to state 38


State 45

   84 whilestmt: MY_WHILE MY_OPEN_PAR . expr MY_CLOSE_PAR stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 100
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 46

   10 stmt: MY_CONTINUE MY_SEMICOLON .

    $default  reduce using rule 10 (stmt)


State 47

    9 stmt: MY_BREAK MY_SEMICOLON .

    $default  reduce using rule 9 (stmt)


State 48

   86 returnstmt: MY_RETURN MY_SEMICOLON .

    $default  reduce using rule 86 (returnstmt)


State 49

   15 expr: expr . operator expr
   87 returnstmt: MY_RETURN expr . MY_SEMICOLON

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_SEMICOLON  shift, and go to state 101

    operator  go to state 84


State 50

   15 expr: expr . operator expr
   32 term: MY_NOT expr .

    $default  reduce using rule 32 (term)

    operator  go to state 84


State 51

   45 lvalue: MY_LOCAL MY_ID .

    $default  reduce using rule 45 (lvalue)


State 52

   71 funcdef: MY_FUNCTION MY_ID . MY_OPEN_PAR idlist MY_CLOSE_PAR block

    MY_OPEN_PAR  shift, and go to state 102


State 53

   70 funcdef: MY_FUNCTION MY_OPEN_PAR . idlist MY_CLOSE_PAR block

    MY_ID  shift, and go to state 103

    $default  reduce using rule 79 (idlist)

    idlist  go to state 104


State 54

   54 call: MY_OPEN_PAR . funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_FUNCTION  shift, and go to state 13

    funcdef  go to state 105


State 55

   33 term: MY_INC lvalue .
   48 member: lvalue . MY_DOT_SIMPLE MY_ID
   49       | lvalue . MY_OPEN_BRA expr MY_CLOSE_BRA
   53 call: lvalue . callsuffix

    MY_OPEN_BRA    shift, and go to state 88
    MY_OPEN_PAR    shift, and go to state 89
    MY_DOT_SIMPLE  shift, and go to state 90
    MY_DOT_DOUBLE  shift, and go to state 91

    $default  reduce using rule 33 (term)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 56

   50 member: call . MY_DOT_SIMPLE MY_ID
   51       | call . MY_OPEN_BRA expr MY_CLOSE_BRA
   52 call: call . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_BRA    shift, and go to state 95
    MY_OPEN_PAR    shift, and go to state 96
    MY_DOT_SIMPLE  shift, and go to state 97


State 57

   15 expr: expr . operator expr
   31 term: MY_MINUS expr .

    $default  reduce using rule 31 (term)

    operator  go to state 84


State 58

   35 term: MY_DEC lvalue .
   48 member: lvalue . MY_DOT_SIMPLE MY_ID
   49       | lvalue . MY_OPEN_BRA expr MY_CLOSE_BRA
   53 call: lvalue . callsuffix

    MY_OPEN_BRA    shift, and go to state 88
    MY_OPEN_PAR    shift, and go to state 89
    MY_DOT_SIMPLE  shift, and go to state 90
    MY_DOT_DOUBLE  shift, and go to state 91

    $default  reduce using rule 35 (term)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 59

   69 block: MY_OPEN_ANG stmts . MY_CLOSE_ANG

    MY_CLOSE_ANG  shift, and go to state 106


State 60

   68 indexedelem: MY_OPEN_ANG . expr MY_DOT_UD expr MY_CLOSE_ANG

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 107
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 61

   15 expr: expr . operator expr
   59 elist: expr . commaexprs

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82
    MY_COMMA   shift, and go to state 108

    $default  reduce using rule 62 (commaexprs)

    operator    go to state 84
    commaexprs  go to state 109


State 62

   63 objectdef: MY_OPEN_BRA elist . MY_CLOSE_BRA

    MY_CLOSE_BRA  shift, and go to state 110


State 63

   64 objectdef: MY_OPEN_BRA indexed . MY_CLOSE_BRA

    MY_CLOSE_BRA  shift, and go to state 111


State 64

   65 indexed: indexedelem . commaindex

    MY_COMMA  shift, and go to state 112

    $default  reduce using rule 67 (commaindex)

    commaindex  go to state 113


State 65

   15 expr: expr . operator expr
   30 term: MY_OPEN_PAR expr . MY_CLOSE_PAR

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_PAR  shift, and go to state 114

    operator  go to state 84


State 66

   42 primary: MY_OPEN_PAR funcdef . MY_CLOSE_PAR
   54 call: MY_OPEN_PAR funcdef . MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 115


State 67

   46 lvalue: MY_DOT_STREAM MY_ID .

    $default  reduce using rule 46 (lvalue)


State 68

    0 $accept: program $end .

    $default  accept


State 69

    2 stmts: stmt stmts .

    $default  reduce using rule 2 (stmts)


State 70

   28 operator: MY_AND .

    $default  reduce using rule 28 (operator)


State 71

   29 operator: MY_OR .

    $default  reduce using rule 29 (operator)


State 72

   26 operator: MY_EQUAL .

    $default  reduce using rule 26 (operator)


State 73

   27 operator: MY_NEQUAL .

    $default  reduce using rule 27 (operator)


State 74

   17 operator: MY_PLUS .

    $default  reduce using rule 17 (operator)


State 75

   18 operator: MY_MINUS .

    $default  reduce using rule 18 (operator)


State 76

   19 operator: MY_MUL .

    $default  reduce using rule 19 (operator)


State 77

   20 operator: MY_DIV .

    $default  reduce using rule 20 (operator)


State 78

   21 operator: MY_MOD .

    $default  reduce using rule 21 (operator)


State 79

   24 operator: MY_L .

    $default  reduce using rule 24 (operator)


State 80

   25 operator: MY_LE .

    $default  reduce using rule 25 (operator)


State 81

   22 operator: MY_G .

    $default  reduce using rule 22 (operator)


State 82

   23 operator: MY_GE .

    $default  reduce using rule 23 (operator)


State 83

    4 stmt: expr MY_SEMICOLON .

    $default  reduce using rule 4 (stmt)


State 84

   15 expr: expr operator . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 116
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 85

   38 assignexpr: lvalue MY_ASSIGN . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 117
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 86

   34 term: lvalue MY_INC .

    $default  reduce using rule 34 (term)


State 87

   36 term: lvalue MY_DEC .

    $default  reduce using rule 36 (term)


State 88

   49 member: lvalue MY_OPEN_BRA . expr MY_CLOSE_BRA

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 118
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 89

   57 normcall: MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 60 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 119
    objectdef   go to state 35
    const       go to state 38


State 90

   48 member: lvalue MY_DOT_SIMPLE . MY_ID

    MY_ID  shift, and go to state 120


State 91

   58 methodcall: MY_DOT_DOUBLE . MY_ID MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_ID  shift, and go to state 121


State 92

   53 call: lvalue callsuffix .

    $default  reduce using rule 53 (call)


State 93

   55 callsuffix: normcall .

    $default  reduce using rule 55 (callsuffix)


State 94

   56 callsuffix: methodcall .

    $default  reduce using rule 56 (callsuffix)


State 95

   51 member: call MY_OPEN_BRA . expr MY_CLOSE_BRA

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 122
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 96

   52 call: call MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 60 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 123
    objectdef   go to state 35
    const       go to state 38


State 97

   50 member: call MY_DOT_SIMPLE . MY_ID

    MY_ID  shift, and go to state 124


State 98

   15 expr: expr . operator expr
   82 ifstmt: MY_IF MY_OPEN_PAR expr . MY_CLOSE_PAR stmt
   83       | MY_IF MY_OPEN_PAR expr . MY_CLOSE_PAR stmt MY_ELSE stmt

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_PAR  shift, and go to state 125

    operator  go to state 84


State 99

   85 forstmt: MY_FOR MY_OPEN_PAR elist . MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_SEMICOLON  shift, and go to state 126


State 100

   15 expr: expr . operator expr
   84 whilestmt: MY_WHILE MY_OPEN_PAR expr . MY_CLOSE_PAR stmt

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_PAR  shift, and go to state 127

    operator  go to state 84


State 101

   87 returnstmt: MY_RETURN expr MY_SEMICOLON .

    $default  reduce using rule 87 (returnstmt)


State 102

   71 funcdef: MY_FUNCTION MY_ID MY_OPEN_PAR . idlist MY_CLOSE_PAR block

    MY_ID  shift, and go to state 103

    $default  reduce using rule 79 (idlist)

    idlist  go to state 128


State 103

   78 idlist: MY_ID . idwithcommas

    MY_COMMA  shift, and go to state 129

    $default  reduce using rule 81 (idwithcommas)

    idwithcommas  go to state 130


State 104

   70 funcdef: MY_FUNCTION MY_OPEN_PAR idlist . MY_CLOSE_PAR block

    MY_CLOSE_PAR  shift, and go to state 131


State 105

   54 call: MY_OPEN_PAR funcdef . MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 132


State 106

   69 block: MY_OPEN_ANG stmts MY_CLOSE_ANG .

    $default  reduce using rule 69 (block)


State 107

   15 expr: expr . operator expr
   68 indexedelem: MY_OPEN_ANG expr . MY_DOT_UD expr MY_CLOSE_ANG

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82
    MY_DOT_UD  shift, and go to state 133

    operator  go to state 84


State 108

   61 commaexprs: MY_COMMA . expr commaexprs

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 134
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 109

   59 elist: expr commaexprs .

    $default  reduce using rule 59 (elist)


State 110

   63 objectdef: MY_OPEN_BRA elist MY_CLOSE_BRA .

    $default  reduce using rule 63 (objectdef)


State 111

   64 objectdef: MY_OPEN_BRA indexed MY_CLOSE_BRA .

    $default  reduce using rule 64 (objectdef)


State 112

   66 commaindex: MY_COMMA . indexedelem commaindex

    MY_OPEN_ANG  shift, and go to state 60

    indexedelem  go to state 135


State 113

   65 indexed: indexedelem commaindex .

    $default  reduce using rule 65 (indexed)


State 114

   30 term: MY_OPEN_PAR expr MY_CLOSE_PAR .

    $default  reduce using rule 30 (term)


State 115

   42 primary: MY_OPEN_PAR funcdef MY_CLOSE_PAR .
   54 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_PAR  shift, and go to state 136

    $default  reduce using rule 42 (primary)


State 116

   15 expr: expr . operator expr
   15     | expr operator expr .

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82

    MY_AND     [reduce using rule 15 (expr)]
    MY_OR      [reduce using rule 15 (expr)]
    MY_EQUAL   [reduce using rule 15 (expr)]
    MY_NEQUAL  [reduce using rule 15 (expr)]
    MY_PLUS    [reduce using rule 15 (expr)]
    MY_MINUS   [reduce using rule 15 (expr)]
    MY_MUL     [reduce using rule 15 (expr)]
    MY_DIV     [reduce using rule 15 (expr)]
    MY_MOD     [reduce using rule 15 (expr)]
    MY_L       [reduce using rule 15 (expr)]
    MY_LE      [reduce using rule 15 (expr)]
    MY_G       [reduce using rule 15 (expr)]
    MY_GE      [reduce using rule 15 (expr)]
    $default   reduce using rule 15 (expr)

    operator  go to state 84


State 117

   15 expr: expr . operator expr
   38 assignexpr: lvalue MY_ASSIGN expr .

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82

    $default  reduce using rule 38 (assignexpr)

    operator  go to state 84


State 118

   15 expr: expr . operator expr
   49 member: lvalue MY_OPEN_BRA expr . MY_CLOSE_BRA

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_BRA  shift, and go to state 137

    operator  go to state 84


State 119

   57 normcall: MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 138


State 120

   48 member: lvalue MY_DOT_SIMPLE MY_ID .

    $default  reduce using rule 48 (member)


State 121

   58 methodcall: MY_DOT_DOUBLE MY_ID . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_PAR  shift, and go to state 139


State 122

   15 expr: expr . operator expr
   51 member: call MY_OPEN_BRA expr . MY_CLOSE_BRA

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_BRA  shift, and go to state 140

    operator  go to state 84


State 123

   52 call: call MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 141


State 124

   50 member: call MY_DOT_SIMPLE MY_ID .

    $default  reduce using rule 50 (member)


State 125

   82 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR . stmt
   83       | MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR . stmt MY_ELSE stmt

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 142
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 126

   85 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON . expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 143
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 127

   84 whilestmt: MY_WHILE MY_OPEN_PAR expr MY_CLOSE_PAR . stmt

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 144
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 128

   71 funcdef: MY_FUNCTION MY_ID MY_OPEN_PAR idlist . MY_CLOSE_PAR block

    MY_CLOSE_PAR  shift, and go to state 145


State 129

   80 idwithcommas: MY_COMMA . MY_ID idwithcommas

    MY_ID  shift, and go to state 146


State 130

   78 idlist: MY_ID idwithcommas .

    $default  reduce using rule 78 (idlist)


State 131

   70 funcdef: MY_FUNCTION MY_OPEN_PAR idlist MY_CLOSE_PAR . block

    MY_OPEN_ANG  shift, and go to state 20

    block  go to state 147


State 132

   54 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_PAR  shift, and go to state 136


State 133

   68 indexedelem: MY_OPEN_ANG expr MY_DOT_UD . expr MY_CLOSE_ANG

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 148
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 134

   15 expr: expr . operator expr
   61 commaexprs: MY_COMMA expr . commaexprs

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82
    MY_COMMA   shift, and go to state 108

    $default  reduce using rule 62 (commaexprs)

    operator    go to state 84
    commaexprs  go to state 149


State 135

   66 commaindex: MY_COMMA indexedelem . commaindex

    MY_COMMA  shift, and go to state 112

    $default  reduce using rule 67 (commaindex)

    commaindex  go to state 150


State 136

   54 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 60 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 151
    objectdef   go to state 35
    const       go to state 38


State 137

   49 member: lvalue MY_OPEN_BRA expr MY_CLOSE_BRA .

    $default  reduce using rule 49 (member)


State 138

   57 normcall: MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 57 (normcall)


State 139

   58 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 60 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 152
    objectdef   go to state 35
    const       go to state 38


State 140

   51 member: call MY_OPEN_BRA expr MY_CLOSE_BRA .

    $default  reduce using rule 51 (member)


State 141

   52 call: call MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 52 (call)


State 142

   82 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt .
   83       | MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt . MY_ELSE stmt

    MY_ELSE  shift, and go to state 153

    MY_ELSE   [reduce using rule 82 (ifstmt)]
    $default  reduce using rule 82 (ifstmt)


State 143

   15 expr: expr . operator expr
   85 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr . MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_SEMICOLON  shift, and go to state 154

    operator  go to state 84


State 144

   84 whilestmt: MY_WHILE MY_OPEN_PAR expr MY_CLOSE_PAR stmt .

    $default  reduce using rule 84 (whilestmt)


State 145

   71 funcdef: MY_FUNCTION MY_ID MY_OPEN_PAR idlist MY_CLOSE_PAR . block

    MY_OPEN_ANG  shift, and go to state 20

    block  go to state 155


State 146

   80 idwithcommas: MY_COMMA MY_ID . idwithcommas

    MY_COMMA  shift, and go to state 129

    $default  reduce using rule 81 (idwithcommas)

    idwithcommas  go to state 156


State 147

   70 funcdef: MY_FUNCTION MY_OPEN_PAR idlist MY_CLOSE_PAR block .

    $default  reduce using rule 70 (funcdef)


State 148

   15 expr: expr . operator expr
   68 indexedelem: MY_OPEN_ANG expr MY_DOT_UD expr . MY_CLOSE_ANG

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_ANG  shift, and go to state 157

    operator  go to state 84


State 149

   61 commaexprs: MY_COMMA expr commaexprs .

    $default  reduce using rule 61 (commaexprs)


State 150

   66 commaindex: MY_COMMA indexedelem commaindex .

    $default  reduce using rule 66 (commaindex)


State 151

   54 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 158


State 152

   58 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 159


State 153

   83 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE . stmt

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 160
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 154

   85 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON . elist MY_CLOSE_PAR stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 60 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 161
    objectdef   go to state 35
    const       go to state 38


State 155

   71 funcdef: MY_FUNCTION MY_ID MY_OPEN_PAR idlist MY_CLOSE_PAR block .

    $default  reduce using rule 71 (funcdef)


State 156

   80 idwithcommas: MY_COMMA MY_ID idwithcommas .

    $default  reduce using rule 80 (idwithcommas)


State 157

   68 indexedelem: MY_OPEN_ANG expr MY_DOT_UD expr MY_CLOSE_ANG .

    $default  reduce using rule 68 (indexedelem)


State 158

   54 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 54 (call)


State 159

   58 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 58 (methodcall)


State 160

   83 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE stmt .

    $default  reduce using rule 83 (ifstmt)


State 161

   85 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist . MY_CLOSE_PAR stmt

    MY_CLOSE_PAR  shift, and go to state 162


State 162

   85 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR . stmt

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 163
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 163

   85 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt .

    $default  reduce using rule 85 (forstmt)
