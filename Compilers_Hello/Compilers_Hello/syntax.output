Terminals unused in grammar

   MY_MULTILINE_COMMENTS
   MY_SIMPLE_COMMENTS
   MY_DO
   MY_GLOBAL
   MY_STATIC
   MY_BLANK
   MY_NL
   MY_OTHER


State 115 conflicts: 13 shift/reduce
State 142 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmts: stmt stmts
    3      | %empty

    4 stmt: expr MY_SEMICOLON
    5     | ifstmt
    6     | whilestmt
    7     | forstmt
    8     | returnstmt
    9     | MY_BREAK MY_SEMICOLON
   10     | MY_CONTINUE MY_SEMICOLON
   11     | block
   12     | funcdef
   13     | MY_SEMICOLON

   14 expr: assignexpr
   15     | expr operator expr
   16     | term

   17 operator: MY_PLUS
   18         | MY_MINUS
   19         | MY_MUL
   20         | MY_DIV
   21         | MY_MOD
   22         | MY_G
   23         | MY_GE
   24         | MY_L
   25         | MY_LE
   26         | MY_EQUAL
   27         | MY_NEQUAL
   28         | MY_AND
   29         | MY_OR

   30 term: MY_OPEN_PAR expr MY_CLOSE_PAR
   31     | MY_MINUS expr
   32     | MY_NOT expr
   33     | MY_INC lvalue
   34     | lvalue MY_INC
   35     | MY_DEC lvalue
   36     | lvalue MY_DEC
   37     | primary

   38 $@1: %empty

   39 assignexpr: lvalue $@1 MY_ASSIGN expr

   40 primary: lvalue
   41        | call
   42        | objectdef
   43        | MY_OPEN_PAR funcdef MY_CLOSE_PAR
   44        | const

   45 lvalue: MY_ID
   46       | MY_LOCAL MY_ID
   47       | MY_DOT_STREAM MY_ID
   48       | member

   49 member: lvalue MY_DOT_SIMPLE MY_ID
   50       | lvalue MY_OPEN_BRA expr MY_CLOSE_BRA
   51       | call MY_DOT_SIMPLE MY_ID
   52       | call MY_OPEN_BRA expr MY_CLOSE_BRA

   53 call: call MY_OPEN_PAR elist MY_CLOSE_PAR
   54     | lvalue callsuffix
   55     | MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

   56 callsuffix: normcall
   57           | methodcall

   58 normcall: MY_OPEN_PAR elist MY_CLOSE_PAR

   59 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR elist MY_CLOSE_PAR

   60 elist: expr commaexprs
   61      | %empty

   62 commaexprs: MY_COMMA expr commaexprs
   63           | %empty

   64 objectdef: MY_OPEN_BRA elist MY_CLOSE_BRA
   65          | MY_OPEN_BRA indexed MY_CLOSE_BRA

   66 indexed: indexedelem commaindex

   67 commaindex: MY_COMMA indexedelem commaindex
   68           | %empty

   69 indexedelem: MY_OPEN_ANG expr MY_DOT_UD expr MY_CLOSE_ANG

   70 $@2: %empty

   71 block: MY_OPEN_ANG $@2 stmts MY_CLOSE_ANG

   72 $@3: %empty

   73 funcdef: MY_FUNCTION $@3 MY_OPEN_PAR idlist MY_CLOSE_PAR block

   74 $@4: %empty

   75 funcdef: MY_FUNCTION MY_ID $@4 MY_OPEN_PAR idlist MY_CLOSE_PAR block

   76 const: MY_REAL
   77      | MY_INTEGER
   78      | MY_STRING
   79      | MY_NIL
   80      | MY_TRUE
   81      | MY_FALSE

   82 idlist: MY_ID idwithcommas
   83       | %empty

   84 idwithcommas: MY_COMMA MY_ID idwithcommas
   85             | %empty

   86 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt
   87       | MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE stmt

   88 whilestmt: MY_WHILE MY_OPEN_PAR expr MY_CLOSE_PAR stmt

   89 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

   90 returnstmt: MY_RETURN MY_SEMICOLON
   91           | MY_RETURN expr MY_SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
MY_MULTILINE_COMMENTS (258)
MY_SIMPLE_COMMENTS (259)
MY_STRING (260) 78
MY_IF (261) 86 87
MY_ELSE (262) 87
MY_FOR (263) 89
MY_WHILE (264) 88
MY_DO (265)
MY_CONTINUE (266) 10
MY_BREAK (267) 9
MY_RETURN (268) 90 91
MY_AND (269) 28
MY_OR (270) 29
MY_NOT (271) 32
MY_LOCAL (272) 46
MY_GLOBAL (273)
MY_STATIC (274)
MY_NIL (275) 79
MY_TRUE (276) 80
MY_FALSE (277) 81
MY_FUNCTION (278) 73 75
MY_ID (279) 45 46 47 49 51 59 75 82 84
MY_BLANK (280)
MY_NL (281)
MY_INTEGER (282) 77
MY_REAL (283) 76
MY_ASSIGN (284) 39
MY_EQUAL (285) 26
MY_NEQUAL (286) 27
MY_PLUS (287) 17
MY_INC (288) 33 34
MY_MINUS (289) 18 31
MY_DEC (290) 35 36
MY_MUL (291) 19
MY_DIV (292) 20
MY_MOD (293) 21
MY_L (294) 24
MY_LE (295) 25
MY_G (296) 22
MY_GE (297) 23
MY_OPEN_ANG (298) 69 71
MY_OPEN_BRA (299) 50 52 64 65
MY_OPEN_PAR (300) 30 43 53 55 58 59 73 75 86 87 88 89
MY_CLOSE_ANG (301) 69 71
MY_CLOSE_BRA (302) 50 52 64 65
MY_CLOSE_PAR (303) 30 43 53 55 58 59 73 75 86 87 88 89
MY_DOT_UD (304) 69
MY_DOT_STREAM (305) 47
MY_DOT_SIMPLE (306) 49 51
MY_DOT_DOUBLE (307) 59
MY_COMMA (308) 62 67 84
MY_SEMICOLON (309) 4 9 10 13 89 90 91
MY_OTHER (310)
UNARY_MINUS (311)


Nonterminals, with rules where they appear

$accept (57)
    on left: 0
program (58)
    on left: 1, on right: 0
stmts (59)
    on left: 2 3, on right: 1 2 71
stmt (60)
    on left: 4 5 6 7 8 9 10 11 12 13, on right: 2 86 87 88 89
expr (61)
    on left: 14 15 16, on right: 4 15 30 31 32 39 50 52 60 62 69 86
    87 88 89 91
operator (62)
    on left: 17 18 19 20 21 22 23 24 25 26 27 28 29, on right: 15
term (63)
    on left: 30 31 32 33 34 35 36 37, on right: 16
assignexpr (64)
    on left: 39, on right: 14
$@1 (65)
    on left: 38, on right: 39
primary (66)
    on left: 40 41 42 43 44, on right: 37
lvalue (67)
    on left: 45 46 47 48, on right: 33 34 35 36 39 40 49 50 54
member (68)
    on left: 49 50 51 52, on right: 48
call (69)
    on left: 53 54 55, on right: 41 51 52 53
callsuffix (70)
    on left: 56 57, on right: 54
normcall (71)
    on left: 58, on right: 56
methodcall (72)
    on left: 59, on right: 57
elist (73)
    on left: 60 61, on right: 53 55 58 59 64 89
commaexprs (74)
    on left: 62 63, on right: 60 62
objectdef (75)
    on left: 64 65, on right: 42
indexed (76)
    on left: 66, on right: 65
commaindex (77)
    on left: 67 68, on right: 66 67
indexedelem (78)
    on left: 69, on right: 66 67
block (79)
    on left: 71, on right: 11 73 75
$@2 (80)
    on left: 70, on right: 71
funcdef (81)
    on left: 73 75, on right: 12 43 55
$@3 (82)
    on left: 72, on right: 73
$@4 (83)
    on left: 74, on right: 75
const (84)
    on left: 76 77 78 79 80 81, on right: 44
idlist (85)
    on left: 82 83, on right: 73 75
idwithcommas (86)
    on left: 84 85, on right: 82 84
ifstmt (87)
    on left: 86 87, on right: 5
whilestmt (88)
    on left: 88, on right: 6
forstmt (89)
    on left: 89, on right: 7
returnstmt (90)
    on left: 90 91, on right: 8


State 0

    0 $accept: . program $end

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    $default  reduce using rule 3 (stmts)

    program     go to state 25
    stmts       go to state 26
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 1

   78 const: MY_STRING .

    $default  reduce using rule 78 (const)


State 2

   86 ifstmt: MY_IF . MY_OPEN_PAR expr MY_CLOSE_PAR stmt
   87       | MY_IF . MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE stmt

    MY_OPEN_PAR  shift, and go to state 43


State 3

   89 forstmt: MY_FOR . MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_OPEN_PAR  shift, and go to state 44


State 4

   88 whilestmt: MY_WHILE . MY_OPEN_PAR expr MY_CLOSE_PAR stmt

    MY_OPEN_PAR  shift, and go to state 45


State 5

   10 stmt: MY_CONTINUE . MY_SEMICOLON

    MY_SEMICOLON  shift, and go to state 46


State 6

    9 stmt: MY_BREAK . MY_SEMICOLON

    MY_SEMICOLON  shift, and go to state 47


State 7

   90 returnstmt: MY_RETURN . MY_SEMICOLON
   91           | MY_RETURN . expr MY_SEMICOLON

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 48

    expr        go to state 49
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 8

   32 term: MY_NOT . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 50
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 9

   46 lvalue: MY_LOCAL . MY_ID

    MY_ID  shift, and go to state 51


State 10

   79 const: MY_NIL .

    $default  reduce using rule 79 (const)


State 11

   80 const: MY_TRUE .

    $default  reduce using rule 80 (const)


State 12

   81 const: MY_FALSE .

    $default  reduce using rule 81 (const)


State 13

   73 funcdef: MY_FUNCTION . $@3 MY_OPEN_PAR idlist MY_CLOSE_PAR block
   75        | MY_FUNCTION . MY_ID $@4 MY_OPEN_PAR idlist MY_CLOSE_PAR block

    MY_ID  shift, and go to state 52

    $default  reduce using rule 72 ($@3)

    $@3  go to state 53


State 14

   45 lvalue: MY_ID .

    $default  reduce using rule 45 (lvalue)


State 15

   77 const: MY_INTEGER .

    $default  reduce using rule 77 (const)


State 16

   76 const: MY_REAL .

    $default  reduce using rule 76 (const)


State 17

   33 term: MY_INC . lvalue

    MY_LOCAL       shift, and go to state 9
    MY_ID          shift, and go to state 14
    MY_OPEN_PAR    shift, and go to state 54
    MY_DOT_STREAM  shift, and go to state 23

    lvalue  go to state 55
    member  go to state 33
    call    go to state 56


State 18

   31 term: MY_MINUS . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 57
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 19

   35 term: MY_DEC . lvalue

    MY_LOCAL       shift, and go to state 9
    MY_ID          shift, and go to state 14
    MY_OPEN_PAR    shift, and go to state 54
    MY_DOT_STREAM  shift, and go to state 23

    lvalue  go to state 58
    member  go to state 33
    call    go to state 56


State 20

   71 block: MY_OPEN_ANG . $@2 stmts MY_CLOSE_ANG

    $default  reduce using rule 70 ($@2)

    $@2  go to state 59


State 21

   64 objectdef: MY_OPEN_BRA . elist MY_CLOSE_BRA
   65          | MY_OPEN_BRA . indexed MY_CLOSE_BRA

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 60
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 61 (elist)

    expr         go to state 61
    term         go to state 29
    assignexpr   go to state 30
    primary      go to state 31
    lvalue       go to state 32
    member       go to state 33
    call         go to state 34
    elist        go to state 62
    objectdef    go to state 35
    indexed      go to state 63
    indexedelem  go to state 64
    const        go to state 38


State 22

   30 term: MY_OPEN_PAR . expr MY_CLOSE_PAR
   43 primary: MY_OPEN_PAR . funcdef MY_CLOSE_PAR
   55 call: MY_OPEN_PAR . funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 65
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    funcdef     go to state 66
    const       go to state 38


State 23

   47 lvalue: MY_DOT_STREAM . MY_ID

    MY_ID  shift, and go to state 67


State 24

   13 stmt: MY_SEMICOLON .

    $default  reduce using rule 13 (stmt)


State 25

    0 $accept: program . $end

    $end  shift, and go to state 68


State 26

    1 program: stmts .

    $default  reduce using rule 1 (program)


State 27

    2 stmts: stmt . stmts

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    $default  reduce using rule 3 (stmts)

    stmts       go to state 69
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 28

    4 stmt: expr . MY_SEMICOLON
   15 expr: expr . operator expr

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_SEMICOLON  shift, and go to state 83

    operator  go to state 84


State 29

   16 expr: term .

    $default  reduce using rule 16 (expr)


State 30

   14 expr: assignexpr .

    $default  reduce using rule 14 (expr)


State 31

   37 term: primary .

    $default  reduce using rule 37 (term)


State 32

   34 term: lvalue . MY_INC
   36     | lvalue . MY_DEC
   39 assignexpr: lvalue . $@1 MY_ASSIGN expr
   40 primary: lvalue .
   49 member: lvalue . MY_DOT_SIMPLE MY_ID
   50       | lvalue . MY_OPEN_BRA expr MY_CLOSE_BRA
   54 call: lvalue . callsuffix

    MY_INC         shift, and go to state 85
    MY_DEC         shift, and go to state 86
    MY_OPEN_BRA    shift, and go to state 87
    MY_OPEN_PAR    shift, and go to state 88
    MY_DOT_SIMPLE  shift, and go to state 89
    MY_DOT_DOUBLE  shift, and go to state 90

    MY_ASSIGN  reduce using rule 38 ($@1)
    $default   reduce using rule 40 (primary)

    $@1         go to state 91
    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 33

   48 lvalue: member .

    $default  reduce using rule 48 (lvalue)


State 34

   41 primary: call .
   51 member: call . MY_DOT_SIMPLE MY_ID
   52       | call . MY_OPEN_BRA expr MY_CLOSE_BRA
   53 call: call . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_BRA    shift, and go to state 95
    MY_OPEN_PAR    shift, and go to state 96
    MY_DOT_SIMPLE  shift, and go to state 97

    $default  reduce using rule 41 (primary)


State 35

   42 primary: objectdef .

    $default  reduce using rule 42 (primary)


State 36

   11 stmt: block .

    $default  reduce using rule 11 (stmt)


State 37

   12 stmt: funcdef .

    $default  reduce using rule 12 (stmt)


State 38

   44 primary: const .

    $default  reduce using rule 44 (primary)


State 39

    5 stmt: ifstmt .

    $default  reduce using rule 5 (stmt)


State 40

    6 stmt: whilestmt .

    $default  reduce using rule 6 (stmt)


State 41

    7 stmt: forstmt .

    $default  reduce using rule 7 (stmt)


State 42

    8 stmt: returnstmt .

    $default  reduce using rule 8 (stmt)


State 43

   86 ifstmt: MY_IF MY_OPEN_PAR . expr MY_CLOSE_PAR stmt
   87       | MY_IF MY_OPEN_PAR . expr MY_CLOSE_PAR stmt MY_ELSE stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 98
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 44

   89 forstmt: MY_FOR MY_OPEN_PAR . elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 61 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 99
    objectdef   go to state 35
    const       go to state 38


State 45

   88 whilestmt: MY_WHILE MY_OPEN_PAR . expr MY_CLOSE_PAR stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 100
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 46

   10 stmt: MY_CONTINUE MY_SEMICOLON .

    $default  reduce using rule 10 (stmt)


State 47

    9 stmt: MY_BREAK MY_SEMICOLON .

    $default  reduce using rule 9 (stmt)


State 48

   90 returnstmt: MY_RETURN MY_SEMICOLON .

    $default  reduce using rule 90 (returnstmt)


State 49

   15 expr: expr . operator expr
   91 returnstmt: MY_RETURN expr . MY_SEMICOLON

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_SEMICOLON  shift, and go to state 101

    operator  go to state 84


State 50

   15 expr: expr . operator expr
   32 term: MY_NOT expr .

    $default  reduce using rule 32 (term)

    operator  go to state 84


State 51

   46 lvalue: MY_LOCAL MY_ID .

    $default  reduce using rule 46 (lvalue)


State 52

   75 funcdef: MY_FUNCTION MY_ID . $@4 MY_OPEN_PAR idlist MY_CLOSE_PAR block

    $default  reduce using rule 74 ($@4)

    $@4  go to state 102


State 53

   73 funcdef: MY_FUNCTION $@3 . MY_OPEN_PAR idlist MY_CLOSE_PAR block

    MY_OPEN_PAR  shift, and go to state 103


State 54

   55 call: MY_OPEN_PAR . funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_FUNCTION  shift, and go to state 13

    funcdef  go to state 104


State 55

   33 term: MY_INC lvalue .
   49 member: lvalue . MY_DOT_SIMPLE MY_ID
   50       | lvalue . MY_OPEN_BRA expr MY_CLOSE_BRA
   54 call: lvalue . callsuffix

    MY_OPEN_BRA    shift, and go to state 87
    MY_OPEN_PAR    shift, and go to state 88
    MY_DOT_SIMPLE  shift, and go to state 89
    MY_DOT_DOUBLE  shift, and go to state 90

    $default  reduce using rule 33 (term)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 56

   51 member: call . MY_DOT_SIMPLE MY_ID
   52       | call . MY_OPEN_BRA expr MY_CLOSE_BRA
   53 call: call . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_BRA    shift, and go to state 95
    MY_OPEN_PAR    shift, and go to state 96
    MY_DOT_SIMPLE  shift, and go to state 97


State 57

   15 expr: expr . operator expr
   31 term: MY_MINUS expr .

    $default  reduce using rule 31 (term)

    operator  go to state 84


State 58

   35 term: MY_DEC lvalue .
   49 member: lvalue . MY_DOT_SIMPLE MY_ID
   50       | lvalue . MY_OPEN_BRA expr MY_CLOSE_BRA
   54 call: lvalue . callsuffix

    MY_OPEN_BRA    shift, and go to state 87
    MY_OPEN_PAR    shift, and go to state 88
    MY_DOT_SIMPLE  shift, and go to state 89
    MY_DOT_DOUBLE  shift, and go to state 90

    $default  reduce using rule 35 (term)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 59

   71 block: MY_OPEN_ANG $@2 . stmts MY_CLOSE_ANG

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    $default  reduce using rule 3 (stmts)

    stmts       go to state 105
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 60

   69 indexedelem: MY_OPEN_ANG . expr MY_DOT_UD expr MY_CLOSE_ANG

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 106
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 61

   15 expr: expr . operator expr
   60 elist: expr . commaexprs

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82
    MY_COMMA   shift, and go to state 107

    $default  reduce using rule 63 (commaexprs)

    operator    go to state 84
    commaexprs  go to state 108


State 62

   64 objectdef: MY_OPEN_BRA elist . MY_CLOSE_BRA

    MY_CLOSE_BRA  shift, and go to state 109


State 63

   65 objectdef: MY_OPEN_BRA indexed . MY_CLOSE_BRA

    MY_CLOSE_BRA  shift, and go to state 110


State 64

   66 indexed: indexedelem . commaindex

    MY_COMMA  shift, and go to state 111

    $default  reduce using rule 68 (commaindex)

    commaindex  go to state 112


State 65

   15 expr: expr . operator expr
   30 term: MY_OPEN_PAR expr . MY_CLOSE_PAR

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_PAR  shift, and go to state 113

    operator  go to state 84


State 66

   43 primary: MY_OPEN_PAR funcdef . MY_CLOSE_PAR
   55 call: MY_OPEN_PAR funcdef . MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 114


State 67

   47 lvalue: MY_DOT_STREAM MY_ID .

    $default  reduce using rule 47 (lvalue)


State 68

    0 $accept: program $end .

    $default  accept


State 69

    2 stmts: stmt stmts .

    $default  reduce using rule 2 (stmts)


State 70

   28 operator: MY_AND .

    $default  reduce using rule 28 (operator)


State 71

   29 operator: MY_OR .

    $default  reduce using rule 29 (operator)


State 72

   26 operator: MY_EQUAL .

    $default  reduce using rule 26 (operator)


State 73

   27 operator: MY_NEQUAL .

    $default  reduce using rule 27 (operator)


State 74

   17 operator: MY_PLUS .

    $default  reduce using rule 17 (operator)


State 75

   18 operator: MY_MINUS .

    $default  reduce using rule 18 (operator)


State 76

   19 operator: MY_MUL .

    $default  reduce using rule 19 (operator)


State 77

   20 operator: MY_DIV .

    $default  reduce using rule 20 (operator)


State 78

   21 operator: MY_MOD .

    $default  reduce using rule 21 (operator)


State 79

   24 operator: MY_L .

    $default  reduce using rule 24 (operator)


State 80

   25 operator: MY_LE .

    $default  reduce using rule 25 (operator)


State 81

   22 operator: MY_G .

    $default  reduce using rule 22 (operator)


State 82

   23 operator: MY_GE .

    $default  reduce using rule 23 (operator)


State 83

    4 stmt: expr MY_SEMICOLON .

    $default  reduce using rule 4 (stmt)


State 84

   15 expr: expr operator . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 115
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 85

   34 term: lvalue MY_INC .

    $default  reduce using rule 34 (term)


State 86

   36 term: lvalue MY_DEC .

    $default  reduce using rule 36 (term)


State 87

   50 member: lvalue MY_OPEN_BRA . expr MY_CLOSE_BRA

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 116
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 88

   58 normcall: MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 61 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 117
    objectdef   go to state 35
    const       go to state 38


State 89

   49 member: lvalue MY_DOT_SIMPLE . MY_ID

    MY_ID  shift, and go to state 118


State 90

   59 methodcall: MY_DOT_DOUBLE . MY_ID MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_ID  shift, and go to state 119


State 91

   39 assignexpr: lvalue $@1 . MY_ASSIGN expr

    MY_ASSIGN  shift, and go to state 120


State 92

   54 call: lvalue callsuffix .

    $default  reduce using rule 54 (call)


State 93

   56 callsuffix: normcall .

    $default  reduce using rule 56 (callsuffix)


State 94

   57 callsuffix: methodcall .

    $default  reduce using rule 57 (callsuffix)


State 95

   52 member: call MY_OPEN_BRA . expr MY_CLOSE_BRA

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 121
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 96

   53 call: call MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 61 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 122
    objectdef   go to state 35
    const       go to state 38


State 97

   51 member: call MY_DOT_SIMPLE . MY_ID

    MY_ID  shift, and go to state 123


State 98

   15 expr: expr . operator expr
   86 ifstmt: MY_IF MY_OPEN_PAR expr . MY_CLOSE_PAR stmt
   87       | MY_IF MY_OPEN_PAR expr . MY_CLOSE_PAR stmt MY_ELSE stmt

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_PAR  shift, and go to state 124

    operator  go to state 84


State 99

   89 forstmt: MY_FOR MY_OPEN_PAR elist . MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_SEMICOLON  shift, and go to state 125


State 100

   15 expr: expr . operator expr
   88 whilestmt: MY_WHILE MY_OPEN_PAR expr . MY_CLOSE_PAR stmt

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_PAR  shift, and go to state 126

    operator  go to state 84


State 101

   91 returnstmt: MY_RETURN expr MY_SEMICOLON .

    $default  reduce using rule 91 (returnstmt)


State 102

   75 funcdef: MY_FUNCTION MY_ID $@4 . MY_OPEN_PAR idlist MY_CLOSE_PAR block

    MY_OPEN_PAR  shift, and go to state 127


State 103

   73 funcdef: MY_FUNCTION $@3 MY_OPEN_PAR . idlist MY_CLOSE_PAR block

    MY_ID  shift, and go to state 128

    $default  reduce using rule 83 (idlist)

    idlist  go to state 129


State 104

   55 call: MY_OPEN_PAR funcdef . MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 130


State 105

   71 block: MY_OPEN_ANG $@2 stmts . MY_CLOSE_ANG

    MY_CLOSE_ANG  shift, and go to state 131


State 106

   15 expr: expr . operator expr
   69 indexedelem: MY_OPEN_ANG expr . MY_DOT_UD expr MY_CLOSE_ANG

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82
    MY_DOT_UD  shift, and go to state 132

    operator  go to state 84


State 107

   62 commaexprs: MY_COMMA . expr commaexprs

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 133
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 108

   60 elist: expr commaexprs .

    $default  reduce using rule 60 (elist)


State 109

   64 objectdef: MY_OPEN_BRA elist MY_CLOSE_BRA .

    $default  reduce using rule 64 (objectdef)


State 110

   65 objectdef: MY_OPEN_BRA indexed MY_CLOSE_BRA .

    $default  reduce using rule 65 (objectdef)


State 111

   67 commaindex: MY_COMMA . indexedelem commaindex

    MY_OPEN_ANG  shift, and go to state 60

    indexedelem  go to state 134


State 112

   66 indexed: indexedelem commaindex .

    $default  reduce using rule 66 (indexed)


State 113

   30 term: MY_OPEN_PAR expr MY_CLOSE_PAR .

    $default  reduce using rule 30 (term)


State 114

   43 primary: MY_OPEN_PAR funcdef MY_CLOSE_PAR .
   55 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_PAR  shift, and go to state 135

    $default  reduce using rule 43 (primary)


State 115

   15 expr: expr . operator expr
   15     | expr operator expr .

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82

    MY_AND     [reduce using rule 15 (expr)]
    MY_OR      [reduce using rule 15 (expr)]
    MY_EQUAL   [reduce using rule 15 (expr)]
    MY_NEQUAL  [reduce using rule 15 (expr)]
    MY_PLUS    [reduce using rule 15 (expr)]
    MY_MINUS   [reduce using rule 15 (expr)]
    MY_MUL     [reduce using rule 15 (expr)]
    MY_DIV     [reduce using rule 15 (expr)]
    MY_MOD     [reduce using rule 15 (expr)]
    MY_L       [reduce using rule 15 (expr)]
    MY_LE      [reduce using rule 15 (expr)]
    MY_G       [reduce using rule 15 (expr)]
    MY_GE      [reduce using rule 15 (expr)]
    $default   reduce using rule 15 (expr)

    operator  go to state 84


State 116

   15 expr: expr . operator expr
   50 member: lvalue MY_OPEN_BRA expr . MY_CLOSE_BRA

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_BRA  shift, and go to state 136

    operator  go to state 84


State 117

   58 normcall: MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 137


State 118

   49 member: lvalue MY_DOT_SIMPLE MY_ID .

    $default  reduce using rule 49 (member)


State 119

   59 methodcall: MY_DOT_DOUBLE MY_ID . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_PAR  shift, and go to state 138


State 120

   39 assignexpr: lvalue $@1 MY_ASSIGN . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 139
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 121

   15 expr: expr . operator expr
   52 member: call MY_OPEN_BRA expr . MY_CLOSE_BRA

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_BRA  shift, and go to state 140

    operator  go to state 84


State 122

   53 call: call MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 141


State 123

   51 member: call MY_DOT_SIMPLE MY_ID .

    $default  reduce using rule 51 (member)


State 124

   86 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR . stmt
   87       | MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR . stmt MY_ELSE stmt

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 142
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 125

   89 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON . expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 143
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 126

   88 whilestmt: MY_WHILE MY_OPEN_PAR expr MY_CLOSE_PAR . stmt

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 144
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 127

   75 funcdef: MY_FUNCTION MY_ID $@4 MY_OPEN_PAR . idlist MY_CLOSE_PAR block

    MY_ID  shift, and go to state 128

    $default  reduce using rule 83 (idlist)

    idlist  go to state 145


State 128

   82 idlist: MY_ID . idwithcommas

    MY_COMMA  shift, and go to state 146

    $default  reduce using rule 85 (idwithcommas)

    idwithcommas  go to state 147


State 129

   73 funcdef: MY_FUNCTION $@3 MY_OPEN_PAR idlist . MY_CLOSE_PAR block

    MY_CLOSE_PAR  shift, and go to state 148


State 130

   55 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_PAR  shift, and go to state 135


State 131

   71 block: MY_OPEN_ANG $@2 stmts MY_CLOSE_ANG .

    $default  reduce using rule 71 (block)


State 132

   69 indexedelem: MY_OPEN_ANG expr MY_DOT_UD . expr MY_CLOSE_ANG

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 149
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 133

   15 expr: expr . operator expr
   62 commaexprs: MY_COMMA expr . commaexprs

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82
    MY_COMMA   shift, and go to state 107

    $default  reduce using rule 63 (commaexprs)

    operator    go to state 84
    commaexprs  go to state 150


State 134

   67 commaindex: MY_COMMA indexedelem . commaindex

    MY_COMMA  shift, and go to state 111

    $default  reduce using rule 68 (commaindex)

    commaindex  go to state 151


State 135

   55 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 61 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 152
    objectdef   go to state 35
    const       go to state 38


State 136

   50 member: lvalue MY_OPEN_BRA expr MY_CLOSE_BRA .

    $default  reduce using rule 50 (member)


State 137

   58 normcall: MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 58 (normcall)


State 138

   59 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 61 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 153
    objectdef   go to state 35
    const       go to state 38


State 139

   15 expr: expr . operator expr
   39 assignexpr: lvalue $@1 MY_ASSIGN expr .

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82

    $default  reduce using rule 39 (assignexpr)

    operator  go to state 84


State 140

   52 member: call MY_OPEN_BRA expr MY_CLOSE_BRA .

    $default  reduce using rule 52 (member)


State 141

   53 call: call MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 53 (call)


State 142

   86 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt .
   87       | MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt . MY_ELSE stmt

    MY_ELSE  shift, and go to state 154

    MY_ELSE   [reduce using rule 86 (ifstmt)]
    $default  reduce using rule 86 (ifstmt)


State 143

   15 expr: expr . operator expr
   89 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr . MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_SEMICOLON  shift, and go to state 155

    operator  go to state 84


State 144

   88 whilestmt: MY_WHILE MY_OPEN_PAR expr MY_CLOSE_PAR stmt .

    $default  reduce using rule 88 (whilestmt)


State 145

   75 funcdef: MY_FUNCTION MY_ID $@4 MY_OPEN_PAR idlist . MY_CLOSE_PAR block

    MY_CLOSE_PAR  shift, and go to state 156


State 146

   84 idwithcommas: MY_COMMA . MY_ID idwithcommas

    MY_ID  shift, and go to state 157


State 147

   82 idlist: MY_ID idwithcommas .

    $default  reduce using rule 82 (idlist)


State 148

   73 funcdef: MY_FUNCTION $@3 MY_OPEN_PAR idlist MY_CLOSE_PAR . block

    MY_OPEN_ANG  shift, and go to state 20

    block  go to state 158


State 149

   15 expr: expr . operator expr
   69 indexedelem: MY_OPEN_ANG expr MY_DOT_UD expr . MY_CLOSE_ANG

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_ANG  shift, and go to state 159

    operator  go to state 84


State 150

   62 commaexprs: MY_COMMA expr commaexprs .

    $default  reduce using rule 62 (commaexprs)


State 151

   67 commaindex: MY_COMMA indexedelem commaindex .

    $default  reduce using rule 67 (commaindex)


State 152

   55 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 160


State 153

   59 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 161


State 154

   87 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE . stmt

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 162
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 155

   89 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON . elist MY_CLOSE_PAR stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 61 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 163
    objectdef   go to state 35
    const       go to state 38


State 156

   75 funcdef: MY_FUNCTION MY_ID $@4 MY_OPEN_PAR idlist MY_CLOSE_PAR . block

    MY_OPEN_ANG  shift, and go to state 20

    block  go to state 164


State 157

   84 idwithcommas: MY_COMMA MY_ID . idwithcommas

    MY_COMMA  shift, and go to state 146

    $default  reduce using rule 85 (idwithcommas)

    idwithcommas  go to state 165


State 158

   73 funcdef: MY_FUNCTION $@3 MY_OPEN_PAR idlist MY_CLOSE_PAR block .

    $default  reduce using rule 73 (funcdef)


State 159

   69 indexedelem: MY_OPEN_ANG expr MY_DOT_UD expr MY_CLOSE_ANG .

    $default  reduce using rule 69 (indexedelem)


State 160

   55 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 55 (call)


State 161

   59 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 59 (methodcall)


State 162

   87 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE stmt .

    $default  reduce using rule 87 (ifstmt)


State 163

   89 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist . MY_CLOSE_PAR stmt

    MY_CLOSE_PAR  shift, and go to state 166


State 164

   75 funcdef: MY_FUNCTION MY_ID $@4 MY_OPEN_PAR idlist MY_CLOSE_PAR block .

    $default  reduce using rule 75 (funcdef)


State 165

   84 idwithcommas: MY_COMMA MY_ID idwithcommas .

    $default  reduce using rule 84 (idwithcommas)


State 166

   89 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR . stmt

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 167
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 167

   89 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt .

    $default  reduce using rule 89 (forstmt)
