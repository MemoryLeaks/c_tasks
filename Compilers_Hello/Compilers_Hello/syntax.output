Terminals unused in grammar

   MY_MULTILINE_COMMENTS
   MY_SIMPLE_COMMENTS
   MY_DO
   MY_GLOBAL
   MY_STATIC
   MY_BLANK
   MY_NL
   MY_OTHER


State 153 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmts: stmt stmts
    3      | %empty

    4 stmt: expr MY_SEMICOLON
    5     | ifstmt
    6     | whilestmt
    7     | forstmt
    8     | returnstmt
    9     | MY_BREAK MY_SEMICOLON
   10     | MY_CONTINUE MY_SEMICOLON
   11     | block
   12     | funcdef
   13     | MY_SEMICOLON

   14 expr: assignexpr
   15     | expr MY_PLUS expr
   16     | expr MY_MINUS expr
   17     | expr MY_MUL expr
   18     | expr MY_DIV expr
   19     | expr MY_MOD expr
   20     | expr MY_G expr
   21     | expr MY_GE expr
   22     | expr MY_L expr
   23     | expr MY_LE expr
   24     | expr MY_EQUAL expr
   25     | expr MY_NEQUAL expr
   26     | expr MY_AND expr
   27     | expr MY_OR expr
   28     | term

   29 term: MY_OPEN_PAR expr MY_CLOSE_PAR
   30     | MY_MINUS expr
   31     | MY_NOT expr
   32     | MY_INC lvalue
   33     | lvalue MY_INC
   34     | MY_DEC lvalue
   35     | lvalue MY_DEC
   36     | primary

   37 assignexpr: lvalue MY_ASSIGN expr

   38 primary: lvalue
   39        | call
   40        | objectdef
   41        | MY_OPEN_PAR funcdef MY_CLOSE_PAR
   42        | const

   43 lvalue: MY_ID
   44       | MY_LOCAL MY_ID
   45       | MY_DOT_STREAM MY_ID
   46       | member

   47 member: lvalue MY_DOT_SIMPLE MY_ID
   48       | lvalue MY_OPEN_BRA expr MY_CLOSE_BRA
   49       | call MY_DOT_SIMPLE MY_ID
   50       | call MY_OPEN_BRA expr MY_CLOSE_BRA

   51 call: call MY_OPEN_PAR elist MY_CLOSE_PAR
   52     | lvalue callsuffix
   53     | MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

   54 callsuffix: normcall
   55           | methodcall

   56 normcall: MY_OPEN_PAR elist MY_CLOSE_PAR

   57 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR elist MY_CLOSE_PAR

   58 elist: expr commaexprs
   59      | %empty

   60 commaexprs: MY_COMMA expr commaexprs
   61           | %empty

   62 objectdef: MY_OPEN_BRA elist MY_CLOSE_BRA
   63          | MY_OPEN_BRA indexed MY_CLOSE_BRA

   64 indexed: indexedelem commaindex

   65 commaindex: MY_COMMA indexedelem commaindex
   66           | %empty

   67 indexedelem: MY_OPEN_ANG expr MY_DOT_UD expr MY_CLOSE_ANG

   68 block: MY_OPEN_ANG stmts MY_CLOSE_ANG

   69 funcdef: MY_FUNCTION MY_OPEN_PAR idlist MY_CLOSE_PAR block
   70        | MY_FUNCTION MY_ID MY_OPEN_PAR idlist MY_CLOSE_PAR block

   71 const: MY_REAL
   72      | MY_INTEGER
   73      | MY_STRING
   74      | MY_NIL
   75      | MY_TRUE
   76      | MY_FALSE

   77 idlist: MY_ID commalist
   78       | %empty

   79 commalist: MY_COMMA MY_ID commalist
   80          | %empty

   81 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt
   82       | MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE stmt

   83 whilestmt: MY_WHILE MY_OPEN_PAR expr MY_CLOSE_PAR stmt

   84 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

   85 returnstmt: MY_RETURN MY_SEMICOLON
   86           | MY_RETURN expr MY_SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
MY_MULTILINE_COMMENTS (258)
MY_SIMPLE_COMMENTS (259)
MY_STRING (260) 73
MY_IF (261) 81 82
MY_ELSE (262) 82
MY_FOR (263) 84
MY_WHILE (264) 83
MY_DO (265)
MY_CONTINUE (266) 10
MY_BREAK (267) 9
MY_RETURN (268) 85 86
MY_AND (269) 26
MY_OR (270) 27
MY_NOT (271) 31
MY_LOCAL (272) 44
MY_GLOBAL (273)
MY_STATIC (274)
MY_NIL (275) 74
MY_TRUE (276) 75
MY_FALSE (277) 76
MY_FUNCTION (278) 69 70
MY_ID (279) 43 44 45 47 49 57 70 77 79
MY_BLANK (280)
MY_NL (281)
MY_INTEGER (282) 72
MY_REAL (283) 71
MY_ASSIGN (284) 37
MY_EQUAL (285) 24
MY_NEQUAL (286) 25
MY_PLUS (287) 15
MY_INC (288) 32 33
MY_MINUS (289) 16 30
MY_DEC (290) 34 35
MY_MUL (291) 17
MY_DIV (292) 18
MY_MOD (293) 19
MY_L (294) 22
MY_LE (295) 23
MY_G (296) 20
MY_GE (297) 21
MY_OPEN_ANG (298) 67 68
MY_OPEN_BRA (299) 48 50 62 63
MY_OPEN_PAR (300) 29 41 51 53 56 57 69 70 81 82 83 84
MY_CLOSE_ANG (301) 67 68
MY_CLOSE_BRA (302) 48 50 62 63
MY_CLOSE_PAR (303) 29 41 51 53 56 57 69 70 81 82 83 84
MY_DOT_UD (304) 67
MY_DOT_STREAM (305) 45
MY_DOT_SIMPLE (306) 47 49
MY_DOT_DOUBLE (307) 57
MY_COMMA (308) 60 65 79
MY_SEMICOLON (309) 4 9 10 13 84 85 86
MY_OTHER (310)


Nonterminals, with rules where they appear

$accept (56)
    on left: 0
program (57)
    on left: 1, on right: 0
stmts (58)
    on left: 2 3, on right: 1 2 68
stmt (59)
    on left: 4 5 6 7 8 9 10 11 12 13, on right: 2 81 82 83 84
expr (60)
    on left: 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28, on right:
    4 15 16 17 18 19 20 21 22 23 24 25 26 27 29 30 31 37 48 50 58 60
    67 81 82 83 84 86
term (61)
    on left: 29 30 31 32 33 34 35 36, on right: 28
assignexpr (62)
    on left: 37, on right: 14
primary (63)
    on left: 38 39 40 41 42, on right: 36
lvalue (64)
    on left: 43 44 45 46, on right: 32 33 34 35 37 38 47 48 52
member (65)
    on left: 47 48 49 50, on right: 46
call (66)
    on left: 51 52 53, on right: 39 49 50 51
callsuffix (67)
    on left: 54 55, on right: 52
normcall (68)
    on left: 56, on right: 54
methodcall (69)
    on left: 57, on right: 55
elist (70)
    on left: 58 59, on right: 51 53 56 57 62 84
commaexprs (71)
    on left: 60 61, on right: 58 60
objectdef (72)
    on left: 62 63, on right: 40
indexed (73)
    on left: 64, on right: 63
commaindex (74)
    on left: 65 66, on right: 64 65
indexedelem (75)
    on left: 67, on right: 64 65
block (76)
    on left: 68, on right: 11 69 70
funcdef (77)
    on left: 69 70, on right: 12 41 53
const (78)
    on left: 71 72 73 74 75 76, on right: 42
idlist (79)
    on left: 77 78, on right: 69 70
commalist (80)
    on left: 79 80, on right: 77 79
ifstmt (81)
    on left: 81 82, on right: 5
whilestmt (82)
    on left: 83, on right: 6
forstmt (83)
    on left: 84, on right: 7
returnstmt (84)
    on left: 85 86, on right: 8


State 0

    0 $accept: . program $end

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    $default  reduce using rule 3 (stmts)

    program     go to state 25
    stmts       go to state 26
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 1

   73 const: MY_STRING .

    $default  reduce using rule 73 (const)


State 2

   81 ifstmt: MY_IF . MY_OPEN_PAR expr MY_CLOSE_PAR stmt
   82       | MY_IF . MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE stmt

    MY_OPEN_PAR  shift, and go to state 43


State 3

   84 forstmt: MY_FOR . MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_OPEN_PAR  shift, and go to state 44


State 4

   83 whilestmt: MY_WHILE . MY_OPEN_PAR expr MY_CLOSE_PAR stmt

    MY_OPEN_PAR  shift, and go to state 45


State 5

   10 stmt: MY_CONTINUE . MY_SEMICOLON

    MY_SEMICOLON  shift, and go to state 46


State 6

    9 stmt: MY_BREAK . MY_SEMICOLON

    MY_SEMICOLON  shift, and go to state 47


State 7

   85 returnstmt: MY_RETURN . MY_SEMICOLON
   86           | MY_RETURN . expr MY_SEMICOLON

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 48

    expr        go to state 49
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 8

   31 term: MY_NOT . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 50
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 9

   44 lvalue: MY_LOCAL . MY_ID

    MY_ID  shift, and go to state 51


State 10

   74 const: MY_NIL .

    $default  reduce using rule 74 (const)


State 11

   75 const: MY_TRUE .

    $default  reduce using rule 75 (const)


State 12

   76 const: MY_FALSE .

    $default  reduce using rule 76 (const)


State 13

   69 funcdef: MY_FUNCTION . MY_OPEN_PAR idlist MY_CLOSE_PAR block
   70        | MY_FUNCTION . MY_ID MY_OPEN_PAR idlist MY_CLOSE_PAR block

    MY_ID        shift, and go to state 52
    MY_OPEN_PAR  shift, and go to state 53


State 14

   43 lvalue: MY_ID .

    $default  reduce using rule 43 (lvalue)


State 15

   72 const: MY_INTEGER .

    $default  reduce using rule 72 (const)


State 16

   71 const: MY_REAL .

    $default  reduce using rule 71 (const)


State 17

   32 term: MY_INC . lvalue

    MY_LOCAL       shift, and go to state 9
    MY_ID          shift, and go to state 14
    MY_OPEN_PAR    shift, and go to state 54
    MY_DOT_STREAM  shift, and go to state 23

    lvalue  go to state 55
    member  go to state 33
    call    go to state 56


State 18

   30 term: MY_MINUS . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 57
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 19

   34 term: MY_DEC . lvalue

    MY_LOCAL       shift, and go to state 9
    MY_ID          shift, and go to state 14
    MY_OPEN_PAR    shift, and go to state 54
    MY_DOT_STREAM  shift, and go to state 23

    lvalue  go to state 58
    member  go to state 33
    call    go to state 56


State 20

   68 block: MY_OPEN_ANG . stmts MY_CLOSE_ANG

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    $default  reduce using rule 3 (stmts)

    stmts       go to state 59
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 21

   62 objectdef: MY_OPEN_BRA . elist MY_CLOSE_BRA
   63          | MY_OPEN_BRA . indexed MY_CLOSE_BRA

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 60
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 59 (elist)

    expr         go to state 61
    term         go to state 29
    assignexpr   go to state 30
    primary      go to state 31
    lvalue       go to state 32
    member       go to state 33
    call         go to state 34
    elist        go to state 62
    objectdef    go to state 35
    indexed      go to state 63
    indexedelem  go to state 64
    const        go to state 38


State 22

   29 term: MY_OPEN_PAR . expr MY_CLOSE_PAR
   41 primary: MY_OPEN_PAR . funcdef MY_CLOSE_PAR
   53 call: MY_OPEN_PAR . funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 65
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    funcdef     go to state 66
    const       go to state 38


State 23

   45 lvalue: MY_DOT_STREAM . MY_ID

    MY_ID  shift, and go to state 67


State 24

   13 stmt: MY_SEMICOLON .

    $default  reduce using rule 13 (stmt)


State 25

    0 $accept: program . $end

    $end  shift, and go to state 68


State 26

    1 program: stmts .

    $default  reduce using rule 1 (program)


State 27

    2 stmts: stmt . stmts

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    $default  reduce using rule 3 (stmts)

    stmts       go to state 69
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 28

    4 stmt: expr . MY_SEMICOLON
   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_SEMICOLON  shift, and go to state 83


State 29

   28 expr: term .

    $default  reduce using rule 28 (expr)


State 30

   14 expr: assignexpr .

    $default  reduce using rule 14 (expr)


State 31

   36 term: primary .

    $default  reduce using rule 36 (term)


State 32

   33 term: lvalue . MY_INC
   35     | lvalue . MY_DEC
   37 assignexpr: lvalue . MY_ASSIGN expr
   38 primary: lvalue .
   47 member: lvalue . MY_DOT_SIMPLE MY_ID
   48       | lvalue . MY_OPEN_BRA expr MY_CLOSE_BRA
   52 call: lvalue . callsuffix

    MY_ASSIGN      shift, and go to state 84
    MY_INC         shift, and go to state 85
    MY_DEC         shift, and go to state 86
    MY_OPEN_BRA    shift, and go to state 87
    MY_OPEN_PAR    shift, and go to state 88
    MY_DOT_SIMPLE  shift, and go to state 89
    MY_DOT_DOUBLE  shift, and go to state 90

    $default  reduce using rule 38 (primary)

    callsuffix  go to state 91
    normcall    go to state 92
    methodcall  go to state 93


State 33

   46 lvalue: member .

    $default  reduce using rule 46 (lvalue)


State 34

   39 primary: call .
   49 member: call . MY_DOT_SIMPLE MY_ID
   50       | call . MY_OPEN_BRA expr MY_CLOSE_BRA
   51 call: call . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_BRA    shift, and go to state 94
    MY_OPEN_PAR    shift, and go to state 95
    MY_DOT_SIMPLE  shift, and go to state 96

    $default  reduce using rule 39 (primary)


State 35

   40 primary: objectdef .

    $default  reduce using rule 40 (primary)


State 36

   11 stmt: block .

    $default  reduce using rule 11 (stmt)


State 37

   12 stmt: funcdef .

    $default  reduce using rule 12 (stmt)


State 38

   42 primary: const .

    $default  reduce using rule 42 (primary)


State 39

    5 stmt: ifstmt .

    $default  reduce using rule 5 (stmt)


State 40

    6 stmt: whilestmt .

    $default  reduce using rule 6 (stmt)


State 41

    7 stmt: forstmt .

    $default  reduce using rule 7 (stmt)


State 42

    8 stmt: returnstmt .

    $default  reduce using rule 8 (stmt)


State 43

   81 ifstmt: MY_IF MY_OPEN_PAR . expr MY_CLOSE_PAR stmt
   82       | MY_IF MY_OPEN_PAR . expr MY_CLOSE_PAR stmt MY_ELSE stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 97
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 44

   84 forstmt: MY_FOR MY_OPEN_PAR . elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 59 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 98
    objectdef   go to state 35
    const       go to state 38


State 45

   83 whilestmt: MY_WHILE MY_OPEN_PAR . expr MY_CLOSE_PAR stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 99
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 46

   10 stmt: MY_CONTINUE MY_SEMICOLON .

    $default  reduce using rule 10 (stmt)


State 47

    9 stmt: MY_BREAK MY_SEMICOLON .

    $default  reduce using rule 9 (stmt)


State 48

   85 returnstmt: MY_RETURN MY_SEMICOLON .

    $default  reduce using rule 85 (returnstmt)


State 49

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr
   86 returnstmt: MY_RETURN expr . MY_SEMICOLON

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_SEMICOLON  shift, and go to state 100


State 50

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr
   31 term: MY_NOT expr .

    $default  reduce using rule 31 (term)


State 51

   44 lvalue: MY_LOCAL MY_ID .

    $default  reduce using rule 44 (lvalue)


State 52

   70 funcdef: MY_FUNCTION MY_ID . MY_OPEN_PAR idlist MY_CLOSE_PAR block

    MY_OPEN_PAR  shift, and go to state 101


State 53

   69 funcdef: MY_FUNCTION MY_OPEN_PAR . idlist MY_CLOSE_PAR block

    MY_ID  shift, and go to state 102

    $default  reduce using rule 78 (idlist)

    idlist  go to state 103


State 54

   53 call: MY_OPEN_PAR . funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_FUNCTION  shift, and go to state 13

    funcdef  go to state 104


State 55

   32 term: MY_INC lvalue .
   47 member: lvalue . MY_DOT_SIMPLE MY_ID
   48       | lvalue . MY_OPEN_BRA expr MY_CLOSE_BRA
   52 call: lvalue . callsuffix

    MY_OPEN_BRA    shift, and go to state 87
    MY_OPEN_PAR    shift, and go to state 88
    MY_DOT_SIMPLE  shift, and go to state 89
    MY_DOT_DOUBLE  shift, and go to state 90

    $default  reduce using rule 32 (term)

    callsuffix  go to state 91
    normcall    go to state 92
    methodcall  go to state 93


State 56

   49 member: call . MY_DOT_SIMPLE MY_ID
   50       | call . MY_OPEN_BRA expr MY_CLOSE_BRA
   51 call: call . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_BRA    shift, and go to state 94
    MY_OPEN_PAR    shift, and go to state 95
    MY_DOT_SIMPLE  shift, and go to state 96


State 57

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr
   30 term: MY_MINUS expr .

    MY_MUL  shift, and go to state 76
    MY_DIV  shift, and go to state 77
    MY_MOD  shift, and go to state 78

    $default  reduce using rule 30 (term)


State 58

   34 term: MY_DEC lvalue .
   47 member: lvalue . MY_DOT_SIMPLE MY_ID
   48       | lvalue . MY_OPEN_BRA expr MY_CLOSE_BRA
   52 call: lvalue . callsuffix

    MY_OPEN_BRA    shift, and go to state 87
    MY_OPEN_PAR    shift, and go to state 88
    MY_DOT_SIMPLE  shift, and go to state 89
    MY_DOT_DOUBLE  shift, and go to state 90

    $default  reduce using rule 34 (term)

    callsuffix  go to state 91
    normcall    go to state 92
    methodcall  go to state 93


State 59

   68 block: MY_OPEN_ANG stmts . MY_CLOSE_ANG

    MY_CLOSE_ANG  shift, and go to state 105


State 60

   67 indexedelem: MY_OPEN_ANG . expr MY_DOT_UD expr MY_CLOSE_ANG

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 106
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 61

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr
   58 elist: expr . commaexprs

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82
    MY_COMMA   shift, and go to state 107

    $default  reduce using rule 61 (commaexprs)

    commaexprs  go to state 108


State 62

   62 objectdef: MY_OPEN_BRA elist . MY_CLOSE_BRA

    MY_CLOSE_BRA  shift, and go to state 109


State 63

   63 objectdef: MY_OPEN_BRA indexed . MY_CLOSE_BRA

    MY_CLOSE_BRA  shift, and go to state 110


State 64

   64 indexed: indexedelem . commaindex

    MY_COMMA  shift, and go to state 111

    $default  reduce using rule 66 (commaindex)

    commaindex  go to state 112


State 65

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr
   29 term: MY_OPEN_PAR expr . MY_CLOSE_PAR

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_PAR  shift, and go to state 113


State 66

   41 primary: MY_OPEN_PAR funcdef . MY_CLOSE_PAR
   53 call: MY_OPEN_PAR funcdef . MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 114


State 67

   45 lvalue: MY_DOT_STREAM MY_ID .

    $default  reduce using rule 45 (lvalue)


State 68

    0 $accept: program $end .

    $default  accept


State 69

    2 stmts: stmt stmts .

    $default  reduce using rule 2 (stmts)


State 70

   26 expr: expr MY_AND . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 115
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 71

   27 expr: expr MY_OR . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 116
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 72

   24 expr: expr MY_EQUAL . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 117
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 73

   25 expr: expr MY_NEQUAL . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 118
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 74

   15 expr: expr MY_PLUS . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 119
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 75

   16 expr: expr MY_MINUS . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 120
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 76

   17 expr: expr MY_MUL . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 121
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 77

   18 expr: expr MY_DIV . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 122
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 78

   19 expr: expr MY_MOD . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 123
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 79

   22 expr: expr MY_L . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 124
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 80

   23 expr: expr MY_LE . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 125
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 81

   20 expr: expr MY_G . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 126
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 82

   21 expr: expr MY_GE . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 127
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 83

    4 stmt: expr MY_SEMICOLON .

    $default  reduce using rule 4 (stmt)


State 84

   37 assignexpr: lvalue MY_ASSIGN . expr

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 128
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 85

   33 term: lvalue MY_INC .

    $default  reduce using rule 33 (term)


State 86

   35 term: lvalue MY_DEC .

    $default  reduce using rule 35 (term)


State 87

   48 member: lvalue MY_OPEN_BRA . expr MY_CLOSE_BRA

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 129
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 88

   56 normcall: MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 59 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 130
    objectdef   go to state 35
    const       go to state 38


State 89

   47 member: lvalue MY_DOT_SIMPLE . MY_ID

    MY_ID  shift, and go to state 131


State 90

   57 methodcall: MY_DOT_DOUBLE . MY_ID MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_ID  shift, and go to state 132


State 91

   52 call: lvalue callsuffix .

    $default  reduce using rule 52 (call)


State 92

   54 callsuffix: normcall .

    $default  reduce using rule 54 (callsuffix)


State 93

   55 callsuffix: methodcall .

    $default  reduce using rule 55 (callsuffix)


State 94

   50 member: call MY_OPEN_BRA . expr MY_CLOSE_BRA

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 133
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 95

   51 call: call MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 59 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 134
    objectdef   go to state 35
    const       go to state 38


State 96

   49 member: call MY_DOT_SIMPLE . MY_ID

    MY_ID  shift, and go to state 135


State 97

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr
   81 ifstmt: MY_IF MY_OPEN_PAR expr . MY_CLOSE_PAR stmt
   82       | MY_IF MY_OPEN_PAR expr . MY_CLOSE_PAR stmt MY_ELSE stmt

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_PAR  shift, and go to state 136


State 98

   84 forstmt: MY_FOR MY_OPEN_PAR elist . MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_SEMICOLON  shift, and go to state 137


State 99

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr
   83 whilestmt: MY_WHILE MY_OPEN_PAR expr . MY_CLOSE_PAR stmt

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_PAR  shift, and go to state 138


State 100

   86 returnstmt: MY_RETURN expr MY_SEMICOLON .

    $default  reduce using rule 86 (returnstmt)


State 101

   70 funcdef: MY_FUNCTION MY_ID MY_OPEN_PAR . idlist MY_CLOSE_PAR block

    MY_ID  shift, and go to state 102

    $default  reduce using rule 78 (idlist)

    idlist  go to state 139


State 102

   77 idlist: MY_ID . commalist

    MY_COMMA  shift, and go to state 140

    $default  reduce using rule 80 (commalist)

    commalist  go to state 141


State 103

   69 funcdef: MY_FUNCTION MY_OPEN_PAR idlist . MY_CLOSE_PAR block

    MY_CLOSE_PAR  shift, and go to state 142


State 104

   53 call: MY_OPEN_PAR funcdef . MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 143


State 105

   68 block: MY_OPEN_ANG stmts MY_CLOSE_ANG .

    $default  reduce using rule 68 (block)


State 106

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr
   67 indexedelem: MY_OPEN_ANG expr . MY_DOT_UD expr MY_CLOSE_ANG

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82
    MY_DOT_UD  shift, and go to state 144


State 107

   60 commaexprs: MY_COMMA . expr commaexprs

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 145
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 108

   58 elist: expr commaexprs .

    $default  reduce using rule 58 (elist)


State 109

   62 objectdef: MY_OPEN_BRA elist MY_CLOSE_BRA .

    $default  reduce using rule 62 (objectdef)


State 110

   63 objectdef: MY_OPEN_BRA indexed MY_CLOSE_BRA .

    $default  reduce using rule 63 (objectdef)


State 111

   65 commaindex: MY_COMMA . indexedelem commaindex

    MY_OPEN_ANG  shift, and go to state 60

    indexedelem  go to state 146


State 112

   64 indexed: indexedelem commaindex .

    $default  reduce using rule 64 (indexed)


State 113

   29 term: MY_OPEN_PAR expr MY_CLOSE_PAR .

    $default  reduce using rule 29 (term)


State 114

   41 primary: MY_OPEN_PAR funcdef MY_CLOSE_PAR .
   53 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_PAR  shift, and go to state 147

    $default  reduce using rule 41 (primary)


State 115

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   26     | expr MY_AND expr .
   27     | expr . MY_OR expr

    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82

    $default  reduce using rule 26 (expr)


State 116

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr
   27     | expr MY_OR expr .

    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82

    $default  reduce using rule 27 (expr)


State 117

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   24     | expr MY_EQUAL expr .
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr

    MY_PLUS   shift, and go to state 74
    MY_MINUS  shift, and go to state 75
    MY_MUL    shift, and go to state 76
    MY_DIV    shift, and go to state 77
    MY_MOD    shift, and go to state 78
    MY_L      shift, and go to state 79
    MY_LE     shift, and go to state 80
    MY_G      shift, and go to state 81
    MY_GE     shift, and go to state 82

    MY_EQUAL   error (nonassociative)
    MY_NEQUAL  error (nonassociative)

    $default  reduce using rule 24 (expr)


State 118

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   25     | expr MY_NEQUAL expr .
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr

    MY_PLUS   shift, and go to state 74
    MY_MINUS  shift, and go to state 75
    MY_MUL    shift, and go to state 76
    MY_DIV    shift, and go to state 77
    MY_MOD    shift, and go to state 78
    MY_L      shift, and go to state 79
    MY_LE     shift, and go to state 80
    MY_G      shift, and go to state 81
    MY_GE     shift, and go to state 82

    MY_EQUAL   error (nonassociative)
    MY_NEQUAL  error (nonassociative)

    $default  reduce using rule 25 (expr)


State 119

   15 expr: expr . MY_PLUS expr
   15     | expr MY_PLUS expr .
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr

    MY_MUL  shift, and go to state 76
    MY_DIV  shift, and go to state 77
    MY_MOD  shift, and go to state 78

    $default  reduce using rule 15 (expr)


State 120

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   16     | expr MY_MINUS expr .
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr

    MY_MUL  shift, and go to state 76
    MY_DIV  shift, and go to state 77
    MY_MOD  shift, and go to state 78

    $default  reduce using rule 16 (expr)


State 121

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   17     | expr MY_MUL expr .
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr

    $default  reduce using rule 17 (expr)


State 122

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   18     | expr MY_DIV expr .
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr

    $default  reduce using rule 18 (expr)


State 123

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   19     | expr MY_MOD expr .
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr

    $default  reduce using rule 19 (expr)


State 124

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   22     | expr MY_L expr .
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr

    MY_PLUS   shift, and go to state 74
    MY_MINUS  shift, and go to state 75
    MY_MUL    shift, and go to state 76
    MY_DIV    shift, and go to state 77
    MY_MOD    shift, and go to state 78

    MY_L   error (nonassociative)
    MY_LE  error (nonassociative)
    MY_G   error (nonassociative)
    MY_GE  error (nonassociative)

    $default  reduce using rule 22 (expr)


State 125

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   23     | expr MY_LE expr .
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr

    MY_PLUS   shift, and go to state 74
    MY_MINUS  shift, and go to state 75
    MY_MUL    shift, and go to state 76
    MY_DIV    shift, and go to state 77
    MY_MOD    shift, and go to state 78

    MY_L   error (nonassociative)
    MY_LE  error (nonassociative)
    MY_G   error (nonassociative)
    MY_GE  error (nonassociative)

    $default  reduce using rule 23 (expr)


State 126

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   20     | expr MY_G expr .
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr

    MY_PLUS   shift, and go to state 74
    MY_MINUS  shift, and go to state 75
    MY_MUL    shift, and go to state 76
    MY_DIV    shift, and go to state 77
    MY_MOD    shift, and go to state 78

    MY_L   error (nonassociative)
    MY_LE  error (nonassociative)
    MY_G   error (nonassociative)
    MY_GE  error (nonassociative)

    $default  reduce using rule 20 (expr)


State 127

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   21     | expr MY_GE expr .
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr

    MY_PLUS   shift, and go to state 74
    MY_MINUS  shift, and go to state 75
    MY_MUL    shift, and go to state 76
    MY_DIV    shift, and go to state 77
    MY_MOD    shift, and go to state 78

    MY_L   error (nonassociative)
    MY_LE  error (nonassociative)
    MY_G   error (nonassociative)
    MY_GE  error (nonassociative)

    $default  reduce using rule 21 (expr)


State 128

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr
   37 assignexpr: lvalue MY_ASSIGN expr .

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82

    $default  reduce using rule 37 (assignexpr)


State 129

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr
   48 member: lvalue MY_OPEN_BRA expr . MY_CLOSE_BRA

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_BRA  shift, and go to state 148


State 130

   56 normcall: MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 149


State 131

   47 member: lvalue MY_DOT_SIMPLE MY_ID .

    $default  reduce using rule 47 (member)


State 132

   57 methodcall: MY_DOT_DOUBLE MY_ID . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_PAR  shift, and go to state 150


State 133

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr
   50 member: call MY_OPEN_BRA expr . MY_CLOSE_BRA

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_BRA  shift, and go to state 151


State 134

   51 call: call MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 152


State 135

   49 member: call MY_DOT_SIMPLE MY_ID .

    $default  reduce using rule 49 (member)


State 136

   81 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR . stmt
   82       | MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR . stmt MY_ELSE stmt

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 153
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 137

   84 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON . expr MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 154
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 138

   83 whilestmt: MY_WHILE MY_OPEN_PAR expr MY_CLOSE_PAR . stmt

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 155
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 139

   70 funcdef: MY_FUNCTION MY_ID MY_OPEN_PAR idlist . MY_CLOSE_PAR block

    MY_CLOSE_PAR  shift, and go to state 156


State 140

   79 commalist: MY_COMMA . MY_ID commalist

    MY_ID  shift, and go to state 157


State 141

   77 idlist: MY_ID commalist .

    $default  reduce using rule 77 (idlist)


State 142

   69 funcdef: MY_FUNCTION MY_OPEN_PAR idlist MY_CLOSE_PAR . block

    MY_OPEN_ANG  shift, and go to state 20

    block  go to state 158


State 143

   53 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR . MY_OPEN_PAR elist MY_CLOSE_PAR

    MY_OPEN_PAR  shift, and go to state 147


State 144

   67 indexedelem: MY_OPEN_ANG expr MY_DOT_UD . expr MY_CLOSE_ANG

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    expr        go to state 159
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 145

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr
   60 commaexprs: MY_COMMA expr . commaexprs

    MY_AND     shift, and go to state 70
    MY_OR      shift, and go to state 71
    MY_EQUAL   shift, and go to state 72
    MY_NEQUAL  shift, and go to state 73
    MY_PLUS    shift, and go to state 74
    MY_MINUS   shift, and go to state 75
    MY_MUL     shift, and go to state 76
    MY_DIV     shift, and go to state 77
    MY_MOD     shift, and go to state 78
    MY_L       shift, and go to state 79
    MY_LE      shift, and go to state 80
    MY_G       shift, and go to state 81
    MY_GE      shift, and go to state 82
    MY_COMMA   shift, and go to state 107

    $default  reduce using rule 61 (commaexprs)

    commaexprs  go to state 160


State 146

   65 commaindex: MY_COMMA indexedelem . commaindex

    MY_COMMA  shift, and go to state 111

    $default  reduce using rule 66 (commaindex)

    commaindex  go to state 161


State 147

   53 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 59 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 162
    objectdef   go to state 35
    const       go to state 38


State 148

   48 member: lvalue MY_OPEN_BRA expr MY_CLOSE_BRA .

    $default  reduce using rule 48 (member)


State 149

   56 normcall: MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 56 (normcall)


State 150

   57 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR . elist MY_CLOSE_PAR

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 59 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 163
    objectdef   go to state 35
    const       go to state 38


State 151

   50 member: call MY_OPEN_BRA expr MY_CLOSE_BRA .

    $default  reduce using rule 50 (member)


State 152

   51 call: call MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 51 (call)


State 153

   81 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt .
   82       | MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt . MY_ELSE stmt

    MY_ELSE  shift, and go to state 164

    MY_ELSE   [reduce using rule 81 (ifstmt)]
    $default  reduce using rule 81 (ifstmt)


State 154

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr
   84 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr . MY_SEMICOLON elist MY_CLOSE_PAR stmt

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_SEMICOLON  shift, and go to state 165


State 155

   83 whilestmt: MY_WHILE MY_OPEN_PAR expr MY_CLOSE_PAR stmt .

    $default  reduce using rule 83 (whilestmt)


State 156

   70 funcdef: MY_FUNCTION MY_ID MY_OPEN_PAR idlist MY_CLOSE_PAR . block

    MY_OPEN_ANG  shift, and go to state 20

    block  go to state 166


State 157

   79 commalist: MY_COMMA MY_ID . commalist

    MY_COMMA  shift, and go to state 140

    $default  reduce using rule 80 (commalist)

    commalist  go to state 167


State 158

   69 funcdef: MY_FUNCTION MY_OPEN_PAR idlist MY_CLOSE_PAR block .

    $default  reduce using rule 69 (funcdef)


State 159

   15 expr: expr . MY_PLUS expr
   16     | expr . MY_MINUS expr
   17     | expr . MY_MUL expr
   18     | expr . MY_DIV expr
   19     | expr . MY_MOD expr
   20     | expr . MY_G expr
   21     | expr . MY_GE expr
   22     | expr . MY_L expr
   23     | expr . MY_LE expr
   24     | expr . MY_EQUAL expr
   25     | expr . MY_NEQUAL expr
   26     | expr . MY_AND expr
   27     | expr . MY_OR expr
   67 indexedelem: MY_OPEN_ANG expr MY_DOT_UD expr . MY_CLOSE_ANG

    MY_AND        shift, and go to state 70
    MY_OR         shift, and go to state 71
    MY_EQUAL      shift, and go to state 72
    MY_NEQUAL     shift, and go to state 73
    MY_PLUS       shift, and go to state 74
    MY_MINUS      shift, and go to state 75
    MY_MUL        shift, and go to state 76
    MY_DIV        shift, and go to state 77
    MY_MOD        shift, and go to state 78
    MY_L          shift, and go to state 79
    MY_LE         shift, and go to state 80
    MY_G          shift, and go to state 81
    MY_GE         shift, and go to state 82
    MY_CLOSE_ANG  shift, and go to state 168


State 160

   60 commaexprs: MY_COMMA expr commaexprs .

    $default  reduce using rule 60 (commaexprs)


State 161

   65 commaindex: MY_COMMA indexedelem commaindex .

    $default  reduce using rule 65 (commaindex)


State 162

   53 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 169


State 163

   57 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR elist . MY_CLOSE_PAR

    MY_CLOSE_PAR  shift, and go to state 170


State 164

   82 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE . stmt

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 171
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 165

   84 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON . elist MY_CLOSE_PAR stmt

    MY_STRING      shift, and go to state 1
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23

    $default  reduce using rule 59 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 172
    objectdef   go to state 35
    const       go to state 38


State 166

   70 funcdef: MY_FUNCTION MY_ID MY_OPEN_PAR idlist MY_CLOSE_PAR block .

    $default  reduce using rule 70 (funcdef)


State 167

   79 commalist: MY_COMMA MY_ID commalist .

    $default  reduce using rule 79 (commalist)


State 168

   67 indexedelem: MY_OPEN_ANG expr MY_DOT_UD expr MY_CLOSE_ANG .

    $default  reduce using rule 67 (indexedelem)


State 169

   53 call: MY_OPEN_PAR funcdef MY_CLOSE_PAR MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 53 (call)


State 170

   57 methodcall: MY_DOT_DOUBLE MY_ID MY_OPEN_PAR elist MY_CLOSE_PAR .

    $default  reduce using rule 57 (methodcall)


State 171

   82 ifstmt: MY_IF MY_OPEN_PAR expr MY_CLOSE_PAR stmt MY_ELSE stmt .

    $default  reduce using rule 82 (ifstmt)


State 172

   84 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist . MY_CLOSE_PAR stmt

    MY_CLOSE_PAR  shift, and go to state 173


State 173

   84 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR . stmt

    MY_STRING      shift, and go to state 1
    MY_IF          shift, and go to state 2
    MY_FOR         shift, and go to state 3
    MY_WHILE       shift, and go to state 4
    MY_CONTINUE    shift, and go to state 5
    MY_BREAK       shift, and go to state 6
    MY_RETURN      shift, and go to state 7
    MY_NOT         shift, and go to state 8
    MY_LOCAL       shift, and go to state 9
    MY_NIL         shift, and go to state 10
    MY_TRUE        shift, and go to state 11
    MY_FALSE       shift, and go to state 12
    MY_FUNCTION    shift, and go to state 13
    MY_ID          shift, and go to state 14
    MY_INTEGER     shift, and go to state 15
    MY_REAL        shift, and go to state 16
    MY_INC         shift, and go to state 17
    MY_MINUS       shift, and go to state 18
    MY_DEC         shift, and go to state 19
    MY_OPEN_ANG    shift, and go to state 20
    MY_OPEN_BRA    shift, and go to state 21
    MY_OPEN_PAR    shift, and go to state 22
    MY_DOT_STREAM  shift, and go to state 23
    MY_SEMICOLON   shift, and go to state 24

    stmt        go to state 174
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 174

   84 forstmt: MY_FOR MY_OPEN_PAR elist MY_SEMICOLON expr MY_SEMICOLON elist MY_CLOSE_PAR stmt .

    $default  reduce using rule 84 (forstmt)
